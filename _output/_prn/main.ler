
                                                              Page :          1
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

      1 //*********************************************************************
        ********
      2 //
      3 // USDC TEMPLATE FIRMWARE for Q111 MCU  
      4 //
      5 // Program:	 LAPIS MCU Development Board Demo Code 
      6 //
      7 // Purpose:	 Demonstration Code for use with LAPIS MCU Development Boar
        d 
      8 //
      9 // Demonstrates: 
     10 //		1.) MCU Initialization (OSC; PORTS; PERIPHERIALS; WDT; etc.) 
     11 //		2.)	INTERRUPTS on TBC
     12 //		3.) INTERRUPTS on TMR 8/9
     13 //		4.) INTERRUPTS on TMR A/B
     14 //		5.) INTERRUPTS on TMR E/F
     15 //		6.) PWM Control
     16 //		7.) UART...
     17 //		8.) ADC...    
     18 //
     19 // Authors:	 C. Schell, K. Bahar & F. Lee 
     20 //		 	 ROHM Semiconductor USA, LLC
     21 //		 	 US Design Center
     22 //
     23 // Notes: 	
     24 //		1.) RTLU8 RUNTIME LIBRARIES:
     25 //				RTLU8 is a C runtime library for mcu's that use the LAPIS nX-U8 a
        s the CPU core
     26 //				RTLU8 provides a large number of routines that can be used when p
        rogramming 
     27 //				in C. Much effort and time can be saved by using these library ro
        utines.
     28 //				For Example, to use the sprintf library for UART commands, you ne
        ed to add 
     29 //				the "LU8100SW.lib" RT Library. To do this open the LAPIS IDE & se
        lect:
     30 //				'Project -> Options -> Target' from the menu bar.  In the "Genera
        l" Tab, 
     31 //				type in "LU8100SW.lib" to add the RTLU8 runtime library for small
         memory 
     32 //				model containing sprintf and many other routines
     33 //		2.) CHECKING THE PROGRAM SIZE:
     34 //				You can check the program size from the map file generated during
         "Compile" step by the Linker. 
     35 //				Please refer to CCU8 programming guide: (3.1. Map Files and 3.1.4
        . Program and Data size)

                                                              Page :          2
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

     36 //				Results will look something like this:
     37 //					Program and Data Sizes
     38 //					This portion of the map file gives aggregate program and data si
        zes for each segment type.
     39 //						Total size (CODE  ) = 02CE4   (11492)
     40 //						Total size (DATA  ) = 002E7   (743)
     41 //						Total size (BIT   ) = 00000.0 (0.0)
     42 //						Total size (NVDATA) = 00000   (0)
     43 //						Total size (NVBIT ) = 00000.0 (0.0)
     44 //						Total size (TABLE ) = 0828A   (33418)
     45 //
     46 // Started:  April 6th, 2013
     47 // Updated:	 JULY 16th, 2014
     48 //*********************************************************************
        ********
     49 
     50 // ================================ ML610Q111 =========================
        ======== 
     51 //	ML610Q111 MCU PINOUT - TSSOP20 Package
     52 //
     53 // 		Pin 01 of mcu => PC0 / TM9OUT / PWMF0 
     54 // 		Pin 02 of mcu => RESET_N
     55 // 		Pin 03 of mcu => TEST
     56 // 		Pin 04 of mcu => PB0 / CMP1OUT / OUTCLK / PWMC / RXD0 / AIN2 / EXI
        4
     57 // 		Pin 05 of mcu => PB1 / TXD1 / TXD0 / PWMD / AIN3 / EXI5 
     58 // 		Pin 06 of mcu => PB2 / PWME / RXD1 / EXI6 
     59 // 		Pin 07 of mcu => PB3 / TXD1 / SIN / EXI7 
     60 // 		Pin 08 of mcu => PA2 / CMP0OUT / CLKIN / PWME / EXI2 
     61 // 		Pin 09 of mcu => TESTF
     62 // 		Pin 10 of mcu => PC3 / TMFOUT
     63 
     64 // 		Pin 11 of mcu => PC2 / PWMF2 
     65 // 		Pin 12 of mcu => PA1 / EXI1 / AIN1 / CMP1P / PWMD / LSCLK / TMFOUT
        
     66 // 		Pin 13 of mcu => PB4 / CMP0P / SOUT / TXD0 / TXD1
     67 // 		Pin 14 of mcu => PB5 / CMP0M / RXD0 / SCK / SCL / PWMF2
     68 // 		Pin 15 of mcu => PB6 / AIN4 / CLKIN / SDA / PWMF1
     69 // 		Pin 16 of mcu => VSS
     70 // 		Pin 17 of mcu => VDD
     71 // 		Pin 18 of mcu => PB7 / AIN5 / RXD1 / LSCLK / PWMF0 / PWMC
     72 // 		Pin 19 of mcu => PA0 / EXI0 / AIN0 / PWMC / OUTCLK / TM9OUT
     73 // 		Pin 20 of mcu => PC1 / PWMF1
     74 //
     75 //=====================================================================
        ========

                                                              Page :          3
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

     76 
     77 //*********************************************************************
        ********
     78 // Microcontroller's connections on the LAPIS MCU Development Board to 
        the 
     79 //  Plug 'n Play, Raspberry Pi Compatible, Universal Connectors:
     80 //
     81 // Pin-01 => 3.3V Power					Pin-02 => 5.0V Power (VBUS)
     82 // Pin-03 => I2C-SDA  (Q111 I/O B.6)	Pin-04 => no connection
     83 // Pin-05 => I2C-SCL  (Q111 I/O B.5)*	Pin-06 => GROUND
     84 // Pin-07 => no connection*				Pin-08 => UART-TX  (Q111 I/O B.1)
     85 // Pin-09 => no connection				Pin-10 => UART-RX  (Q111 I/O B.0) 
     86 // Pin-11 => GPIO #17 (Q111 I/O A.0)	Pin-12 => GPIO #18 (Q111 I/O B.7)
     87 // Pin-13 => GPIO #21 (Q111 I/O A.1)	Pin-14 => no connection
     88 // Pin-15 => GPIO #22 (Q111 I/O A.2)	Pin-16 => GPIO #23 (Q111 I/O C.2)
     89 // Pin-17 => no connection				Pin-18 => GPIO #24 (Q111 I/O C.3)
     90 // Pin-19 => SPI-MOSI (Q111 I/O B.4)	Pin-20 => no connection
     91 // Pin-21 => SPI-MISO (Q111 I/O B.3)	Pin-22 => GPIO #25 (Q111 I/O B.2)
     92 // Pin-23 => SPI-SCLK (Q111 I/O B.5)*	Pin-24 => SPI-CS0  (Q111 I/O C.0)
        
     93 // Pin-25 => no connection				Pin-26 => SPI-CS1  (Q111 I/O C.1)
     94 // 
     95 //=====================================================================
        ========
     96 //*********************************************************************
        ********
     97 
     98 //*********************************************************************
        ********
     99 // Q111 Microcontroller's I/O Pins at J3 on the LAPIS MCU Development B
        oard 
    100 //
    101 // Pin-01 => A.0				Pin-02 => A.1
    102 // Pin-03 => A.2				Pin-04 => B.0
    103 // Pin-05 => B.1				Pin-06 => B.2
    104 // Pin-07 => B.3				Pin-08 => B.4
    105 // Pin-09 => B.5				Pin-10 => B.6 
    106 // Pin-11 => B.7				Pin-12 => C.0
    107 // Pin-13 => C.1				Pin-14 => C.2
    108 // Pin-15 => C.3				Pin-16 => GROUND
    109 //
    110 //=====================================================================
        ========
    111 //*********************************************************************
        ********
    112 

                                                              Page :          4
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    113 
    114 //***** PREPROCESSOR DIRECTIVES ***************************************
        ********
    115  // INCLUDED FILES...
    116 	#include	<ML610111.H>	// Lapis Micro ML610Q111 on LAPIS MCU Developmen
        t Board
    117 	#include	<stdlib.h>		// General-purpose utilities
    118 	#include	<stdio.h>		// I/O-related processing
    119 	#include 	<common.h>		// Common Definitions
    120 	#include 	<irq.h>			// IRQ Definitions
    121 	#include 	<mcu.h>			// MCU Definition
    122 	#include	<i2c.h>			// I2C Definition
    123 	#include 	<tbc.h>			// Set TBC (Timer Based Clock) API
    124 	#include 	<timer.h>		// Timer Macros & APIs
    125 	#include	<math.h>		// Mathematical functions
    126 	#include 	<uart.h>		// UART Function Prototypes	
    127 	//#include	<float.h>		// Numerical limits for floating-point numbers	
    128 	//#include	<string.h>		// Character string manipulation routines
    129 	//#include	<yvals.h>		// Called for by most Header Files
    130 
    131 	//#include 	<main.h>		// Clear WDT API
    132 	//#include	<ctype.h>		// Character classification and conversion 
    133 	//#include	<errno.h>		// Error identifiers Library
    134 	//#include	<limits.h>		// Numerical limits for integers
    135 	//#include	<muldivu8.h>	// Multiplication and Division accelerator
    136 	//#include	<setjmp.h>		// Global jump (allow jumps to locations outsid
        e the current function) 
    137 	//#include	<signal.h>		// Signal handling functions
    138 	//#include	<stdarg.h>		// Variable numbers of arguments
    139 	//#include	<stddef.h>		// Standard types and macros 
    140 	//#include	<yfuns.h>		//  
    141 	
    142 //*********************************************************************
        ********
    143  // I/O PIN DATA ALIASES...
    144 // Connections for Q111 Universal Socket
    145 	#define RX 			PB0D 
    146 	#define TX 			PB1D
    147  
    148 	#define I2C_SDA 	PB6D 
    149 	#define I2C_SCL 	PB5D 
    150 
    151 	#define GPIO_17		PA0D
    152 	#define GPIO_21		PA1D
    153 	#define GPIO_22		PA2D
    154 	#define GPIO_18		PB7D

                                                              Page :          5
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    155 	#define GPIO_23		PC2D
    156 	#define GPIO_24		PC3D
    157 	#define GPIO_25		PB2D
    158 
    159 	#define SPI_MOSI	PB4D
    160 	#define SPI_MISO	PB3D
    161 	#define SPI_SCL 	PB5D
    162 	#define SPI_CS0		PC0D
    163 	#define SPI_CS1 	PC1D 	
    164 	
    165 		// ====== DICE ======
    166 	//
    167 	//	1	2	3
    168 	//
    169 	//	4	5	6
    170 	//
    171 	//	7	8	9
    172 	//
    173 	// ==================
    174 
    175 	#define LED1_pin		PC1D	//2013-04-18 (LaPi Plug 'n Play Board)
    176 	#define LED2_pin		PC3D	//2013-04-18 (LaPi Plug 'n Play Board)
    177 	#define LED3_pin		PB0D	//2013-04-18 (LaPi Plug 'n Play Board)
    178 	#define LED4_pin		PC0D	//2013-04-18 (LaPi Plug 'n Play Board)
    179 	#define LED5_pin		PC2D	//2013-04-18 (LaPi Plug 'n Play Board)
    180 	#define LED6_pin		PB5D	//2013-04-18 (LaPi Plug 'n Play Board)
    181 	#define LED7_pin		PB2D	//2013-04-18 (LaPi Plug 'n Play Board)
    182 	#define LED8_pin		PB7D	//2013-04-18 (LaPi Plug 'n Play Board)
    183 	#define LED9_pin		PB6D	//2013-04-18 (LaPi Plug 'n Play Board)
    184 	
    185 	// ===== Commands for Parallax Serial LCD Display =====
    186 	#define LCD_Display_OFF			(  21U )
    187 	#define LCD_Display_ON_NoBlink	(  22U )
    188 	#define LCD_Display_ON 			(  25U )
    189 	#define LCD_Backlight_ON 		(  17U )
    190 	#define LCD_Backlight_OFF 		(  18U )
    191 	#define LCD_HOME 				( 128U )
    192 	#define LCD_Line2				( 148U )
    193 	
    194 	// ===== Serial Strings =====
    195 	#define WelcomeString		( "LAPIS Q111 LaPi DEV. DEMO") 
    196 	#define WelcomeString_LEN	( sizeof(WelcomeString) - 1 )
    197 
    198 	#define ClearLCD			( "                                ") 
    199 	#define ClearLCD_LEN		( sizeof(ClearLCD) - 1 )
    200 

                                                              Page :          6
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    201 	#define DataHeaderString	( "My Sensor Data = \n\r")
    202 	#define DataHeaderString_LEN	( sizeof(DataHeaderString) - 1  )
    203 
    204 	#define AlarmString			( "MOTION DETECTED BY PIR SENSOR!  \n\r" ) 
    205 	#define AlarmString_LEN		( sizeof(AlarmString) - 1 )
    206 
    207 	#define NoAlarmString		( "PIR: NO MOTION  - ALL IS WELL!  \n\r" ) 
    208 	#define NoAlarmString_LEN	( sizeof(NoAlarmString) - 1 )
    209 
    210 	#define MagFieldString		( "MAGNETIC Field  DETECTED BY HALL\n\r" ) 
    211 	#define MagFieldString_LEN	( sizeof(MagFieldString) - 1 )
    212 
    213 	#define NoMagFieldString	( "HALL:NO MAGNETIC Field Detected!\n\r" ) 
    214 	#define NoMagFieldString_LEN	( sizeof(MagFieldString) - 1 )
    215 
    216 	#define OkayString			( "OKAY!\n\r") 
    217 	#define OkayString_LEN		( sizeof(OkayString) - 1 )
    218 
    219 	#define TestString			( "TESTING!") 
    220 	#define TestString_LEN		( sizeof(TestString) - 1 )
    221 
    222 	#define NewLineString		( "\n\r") 
    223 	#define NewLineString_LEN	( sizeof(NewLineString) - 1 )
    224 
    225 	#define FailureString		( "FAILURE!") 
    226 	#define FailureString_LEN	( sizeof(FailureString) - 1 )
    227 
    228 	#define SuccessString		( "SUCCESS!") 
    229 	#define SuccessString_LEN	( sizeof(SuccessString) - 1 )
    230 
    231 	#define PartSuccessString		( "PARTIALLY SUCCESSFUL!") 
    232 	#define PartSuccessString_LEN	( sizeof(PartSuccessString) - 1 )
    233 	
    234 
    235 //*********************************************************************
        ********
    236 //=====================================================================
        ======
    237 //   MACROS: 
    238 //=====================================================================
        ======
    239 
    240 // ===== Peripheral setting.=====
    241 	#define HSCLK_KHZ	( 8192u )	// 8MHz = 8000kHz (will be multiplied by 1
        024 to give 8,192,000Hz)
    242 	#define FLG_SET	    ( 0x01u ) 	

                                                              Page :          7
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    243 
    244 // ===== SET DESIRED UART SETTINGS HERE! (Options in UART.h) ==========
        ======
    245 #define UART_BAUDRATE		( UART_BR_9600BPS) 		// Data Bits Per Second - T
        ested at rates from 2400bps to 512000bps!
    246 #define UART_DATA_LENGTH	( UART_LG_8BIT )		// x-Bit Data
    247 #define UART_PARITY_BIT		( UART_PT_NON )			// Parity
    248 #define UART_STOP_BIT		( UART_STP_1BIT )		// x Stop-Bits
    249 #define UART_LOGIC			( UART_NEG_POS )		// Desired Logic
    250 #define UART_DIRECTION		( UART_DIR_LSB )		// LSB or MSB First 
    251 
    252 		// ===== UART Settings =====
    253 		//STRUCTURE:
    254 			static const tUartSetParam  _uartSetParam = {		// UART Parameters
    255 				UART_BAUDRATE,						// Members of Structure...
    256 				UART_DATA_LENGTH,					// Members of Structure...
    257 				UART_PARITY_BIT,					// Members of Structure...
    258 				UART_STOP_BIT,						// Members of Structure...
    259 				UART_LOGIC,							// Members of Structure...
    260 				UART_DIRECTION						// Members of Structure...
    261 			};
    262 //=====================================================================
        ======
    263 
    264 
    265 
    266 //*********************************************************************
        ********
    267 //=====================================================================
        ======
    268 //   STRUCTURES: 
    269 //=====================================================================
        ======
    270 	//Example Structure Declaration
    271 	typedef struct {
    272 		unsigned char state     : 1;
    273 		unsigned char state_sub : 2;
    274 		unsigned char reserve   : 5;
    275 	} STRUCT_STATE;	 
    276 
    277 
    278 //*********************************************************************
        ********
    279 
    280 
    281 //*********************************************************************

                                                              Page :          8
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ********
    282 //=====================================================================
        ======
    283 //   FUNCTION PROTOTYPES: 
    284 //	Establishes the name and return type of a function and may specify t
        he 
    285 // 	types, formal parameter names and number of arguments to the functi
        on                                 
    286 //=====================================================================
        ======
    287 	void main_clrWDT( void );				// no return value and no arguments
    288 	void Initialization( void );			// no return value and no arguments
    289 	void SetOSC( void );					// no return value and no arguments
    290 
    291 	static void NOPms(unsigned int ms);		// no return value - Delay in ms 
        as Argument
    292 	void NOPx( unsigned int MyCount );		// no return value - Count in ms a
        s Argument
    293 	void PWM_B0_ON(int myPeriod, int myDutyCycle);		// no return value - P
        eriod & DutyCycle Variables as Arguments
    294 
    295 	void analog_comparator( void );			
    296 	void PortA_Low( void );					// no return value and no arguments
    297 	void PortB_Low( void );					// no return value and no arguments
    298 	void PortC_Low( void );					// no return value and no arguments
    299 	void PortA_Digital_Inputs( void );		// no return value and no argument
        s
    300 	void PinB0_PWM( void ); 				// no return value and no arguments
    301 	void main_reqNotHalt( void );			// no return value and no arguments
    302 
    303 	static void _initPeri( void );
    304 	static void _intWdt( void );
    305 	static void _intTimer( void );
    306 
    307 	void _funcUartFin( unsigned int size, unsigned char errStat );
    308 	void _intUart( void );
    309 
    310 	void _funcI2CFin( unsigned int size, unsigned char errStat );
    311 	void checkI2C( void );
    312 	void _intI2c( void );
    313 
    314 	void _intADC( void );
    315 	
    316 	void TBC_ISR( void );			// TBC Interrupt Service Routine...
    317 	void TMR89_ISR( void );			// TIMER 8/9 Interrupt Service Routine...
    318 	void TMRAB_ISR( void );			// TIMER A/B Interrupt Service Routine...

                                                              Page :          9
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    319 	void TMREF_ISR( void );			// TIMER E/F Interrupt Service Routine...
    320 	void ExtInt_ISR( void );		// External Interrupt Interrupt Service Rout
        ine...
    321 	
    322 	void MyUART_Send ( void );		// no return value and no arguments
    323 	
    324 	void SerialLCDSplash (void);			// no return value and no arguments
    325 	void ClearSerialLCD (void);				// no return value and no arguments	
    326 	void SendLCDCmd(unsigned char LCDcmd);	// no return value - LCD CMD Ar
        gument
    327 	void LCD_Init (void);					// no return value and no arguments 
    328 //*********************************************************************
        ********
    329 
    330 //GLOBALS...
    331 
    332 	//UART, I2C & ADC Variables
    333 	unsigned char	_flgUartFin;
    334 	unsigned char 	_flgI2CFin;
    335 	unsigned char	_flgADCFin;
    336 	unsigned char	_reqNotHalt;
    337 	
    338 	unsigned char			HelloWorld[14] = {"Hello World!  "};
    339 	
    340 	static unsigned char	MyData[200];		//Large Array...
    341 	static char 			MyTx[50];			//Small Array...for UART Transmission, etc
    342 	static unsigned char	MyRx[50];			//Small Array...for UART Receive, etc
        
    343 	static float			Sensor1_Data[10];	//Small Array...
    344 	static float			Sensor2_Data[10];	//Small Array...
    345 	static float			Sensor3_Data[10];	//Small Array...
    346 	
    347 
    348 /*######################################50#############################
        #########*/
    349 /*#                                  APIs                              
              #*/
    350 /*#####################################################################
        #######*/
    351 //*********************************************************************
        ********
    352 //=====================================================================
        ======
    353 //  	Start of MAIN FUNCTION
    354 //=====================================================================
        ======

                                                              Page :         10
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    355 int main(void) 
    356 {
    357 
    358 	//LOCAL VARIABLES
    359 	char char_a;				// -128 to 127
    360 	unsigned char uchar;		// 0-255
    361 	unsigned int uint, delay;	// 0 to 65,535
    362 	long long_a;				// -2,147,483,648 to 2,147,483,647
    363 	float float_a;				// 1.17549435e-38 to 3.40282347e+38
    364 	double double_a;			// 2.2250738585072014e-308 to 1.7976931348623157e+3
        08 
    365 	int i,j,k,x,y;				// -32,768 to 32767
    366 
    367 	Init:
    368 		Initialization();		// Init Micro...(Ports, Timers, OSC, IRQ's, UART, 
        etc...)
    369 		//uart_0_Init(); 
    370 		//main_clrWDT();
    371 		//NOPx(10);				// Short Delay... 
    372 		
    373 /* 		LED1_pin = 0;
    374 		LED2_pin = 0;
    375 		//LED3_pin = 0;
    376 		LED4_pin = 0;
    377 		LED5_pin = 0;
    378 		LED6_pin = 0;
    379 		LED7_pin = 0;
    380 		LED8_pin = 0;
    381 		LED9_pin = 0;   */
    382 
    383 
    384 	MyTest:		
    385 	//PLACE USER CODE HERE...
    386 		//PWM_B0_ON(4000, 125);	//period, Duty Cycle variables
    387 		//LED3_pin ^= 1;
    388 			
    389 		PB2D ^= 1;
    390 		QUA0 = 0;
    391 		main_clrWDT();
    392 		
    393 		// ===== START UART TEST... =====
    394 			//Now test UART!!
    395 				//Add EOL characters to strings
    396 				HelloWorld[12] 	= 0x0D;  // CR  (Carriage Return)
    397 				HelloWorld[13] 	= 0x0A;	 // LF  (Line Feed)
    398 				

                                                              Page :         11
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    399 			uart_startSend(HelloWorld, 14, _funcUartFin); // Send, "Hello World!
        "
    400 				while(_flgUartFin != 1){
    401 					NOPx(1);
    402 					main_clrWDT();
    403 				}
    404 		// ===== END UART TEST ===== 
    405 
    406 		goto MyTest;
    407 		
    408 //			for(i = 0; i<50; i++) 
    409 //			{
    410 //				MyTx[i] = 0x20;		// Clear Data Array...
    411 //			}
    412 //			
    413 //		   //sprintf(MyTx, "%u, %u", LCD_Display_ON,LCD_Backlight_ON, "%u H
        ello World! %u", 215);
    414 //			sprintf(MyTx, "%u", LCD_Backlight_ON);
    415 //			MyTx[48] = 0x0D;	//CR
    416 //			MyTx[49] = 0x0A;	//LF
    417 			
    418 
    419 }//end main
    420 
    421 //=====================================================================
        ======
    422 //  	End of MAIN FUNCTION
    423 //=====================================================================
        ======
    424 //*********************************************************************
        ********
    425 
    426 
    427 
    428 
    429 //*********************************************************************
        ********
    430 //=====================================================================
        ======
    431 //  	Start of Other Functions...
    432 //=====================================================================
        ======
    433 //*********************************************************************
        ********
    434 
    435 

                                                              Page :         12
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    436 /**********************************************************************
        *********
    437 	Routine Name:	main_clrWDT
    438 	Form:			void main_clrWDT( void )
    439 	Parameters:		void
    440 	Return value:	void
    441 	Description:	clear WDT.
    442 ***********************************************************************
        *******/
    443 
    444 void main_clrWDT( void )
***** main\main.c(419) : Warning : W5029 : 'y': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'x': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'k': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'j': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'i': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'double_a': unreferenced local varia
        ble
***** main\main.c(419) : Warning : W5029 : 'float_a': unreferenced local variab
        le
***** main\main.c(419) : Warning : W5029 : 'long_a': unreferenced local variabl
        e
***** main\main.c(419) : Warning : W5029 : 'delay': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'uint': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'uchar': unreferenced local variable
***** main\main.c(419) : Warning : W5029 : 'char_a': unreferenced local variabl
        e
***** main\main.c(419) : Warning : W6002 : 'Init': unreferenced label
    445 {
    446 	//__DI(); // Disable multi-interrupts
    447 		do {
    448 			WDTCON = 0x5Au;
    449 		} while (WDP != 1);
    450 		WDTCON = 0xA5u;
    451 
    452 	//__EI(); // Re-Enable multi-interrupts
    453 }
    454 
    455 //=====================================================================
        ======
    456 //	Initialize Micro to Desired State...
    457 //=====================================================================
        ======
    458 static void Initialization(void){
    459 
    460 	//Initialize Peripherals	

                                                              Page :         13
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    461 		//BLKCON2 Control Bits...Manually Set 4/12/2013
    462 			DSIO0 = 1; // 0=> Enables Synchronous Serial Port 0 
    463 			DUA0  = 0; // 0=> Enables the operation of UART0 
    464 			DUA1  = 1; // 0=> Enables Uart1 
    465 			DI2C1 = 1; // 0=> Enables I2C bus Interface (Slave) 
    466 			DI2C0 = 0; // 0=> Enables I2C bus Interface (Master)	
    467 	
    468 		BLKCON4 = 0x00; // SA-ADC: 0=> Enables ; 0xFF=> Disables
    469 		BLKCON6 = 0x00; // Timers 8, 9, A, E, F : 0=> Enables ; 0xFF=> Disabl
        es
    470 		BLKCON7 = 0xFF; // PWM (PWMC, PWMD, PWME, PWMF : 0=> Enables ; 0xFF=>
         Disables
    471 
    472 	// Port Initialize...
    473 		PortA_Low();	//Initialize all 3 Ports of Q111 Port A to GPIO-Low
    474 		PortB_Low();	//Initialize all 8 Ports of Q111 Port B to GPIO-Low
    475 		PortC_Low();	//Initialize all 4 Ports of Q111 Port C to GPIO-Low
    476 
    477 	// UART INIT...	
    478 		//uart_0_Init();
    479 				
    480 				
    481 	// ===== Set Oscillator Rate =====
    482      	SetOSC(); 	//8MHz
    483 
    484 	// ===== PWM =========================================================
        =======
    485 	//
    486 	//	NOTE: Possible conflict of B.0 with RX pin from UART0
    487 	//	
    488 	//	PinB0_PWM();		// Set up PWM peripheral (Pin on B.0)
    489 	//====================================================================
        =======	
    490 		
    491 	// ===== Comparator =====	
    492 		//analog_comparator();	//Set up anaolg comparator peripheral
    493 
    494 
    495 /* 	// ===== SET SPECIFIC DESIRED PINS AS INPUTS =====
    496 		//Setup PIR Sensor Input on B.4
    497 			//Step 1: Set Pin Direction...
    498 				PB4DIR = 1;			// PortB Bit4 set Direction to INPUT...
    499 			//Step 2: Set Pin I/O Type...
    500 				PB4C1  = 0;			// PortB Bit4 set Type to HIGH-IMPEDANCE INPUT...
    501 				PB4C0  = 0;	
    502 			//Step 3: Set Pin Purpose...

                                                              Page :         14
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    503 				PB4MD1  = 0;		// PortB Bit4 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    504 				PB4MD0  = 0;
    505 
    506 		//Setup HALL Sensor Input on B.3
    507 			//Step 1: Set Pin Direction...
    508 				PB3DIR = 1;			// PortB Bit3 set Direction to INPUT...
    509 			//Step 2: Set Pin I/O Type...
    510 				PB3C1  = 0;			// PortB Bit3 set Type to HIGH-IMPEDANCE INPUT...
    511 				PB3C0  = 0;	
    512 			//Step 3: Set Pin Purpose...
    513 				PB3MD1  = 0;		// PortB Bit3 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    514 				PB3MD0  = 0;
    515 
    516 		//Setup ACCELEROMETER X-SIGNAL Sensor Input on A.2
    517 			//Step 1: Set Pin Direction...
    518 				PA2DIR = 1;			// PortA Bit2 set Direction to INPUT...
    519 			//Step 2: Set Pin I/O Type...
    520 				PA2C1  = 0;			// PortA Bit2 set Type to HIGH-IMPEDANCE INPUT...
    521 				PA2C0  = 0;	
    522 			//Step 3: Set Pin Purpose...
    523 				PA2MD1  = 0;		// PortA Bit2 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    524 				PA2MD0  = 0;
    525 		
    526 		//Setup ACCELEROMETER Y-SIGNAL Sensor Input on A.1
    527 			//Step 1: Set Pin Direction...
    528 				PA1DIR = 1;			// PortA Bit1 set Direction to INPUT...
    529 			//Step 2: Set Pin I/O Type...
    530 				PA1C1  = 0;			// PortA Bit1 set Type to HIGH-IMPEDANCE INPUT...
    531 				PA1C0  = 0;	
    532 			//Step 3: Set Pin Purpose...
    533 				PA1MD1  = 0;		// PortA Bit1 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    534 				PA1MD0  = 0;
    535 
    536 		//Setup ACCELEROMETER Temperature-SIGNAL Sensor Input on A.0
    537 			//Step 1: Set Pin Direction...
    538 				PA0DIR = 1;			// PortA Bit0 set Direction to INPUT...
    539 			//Step 2: Set Pin I/O Type...
    540 				PA0C1  = 0;			// PortA Bit0 set Type to HIGH-IMPEDANCE INPUT...
    541 				PA0C0  = 0;	
    542 			//Step 3: Set Pin Purpose...
    543 				PA0MD1  = 0;		// PortA Bit0 set Purpose to GENERAL PURPOSE Input/Ou
        tput...

                                                              Page :         15
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    544 				PA0MD0  = 0; */
    545 
    546 	//================== STANDBY CONTROL REGISTER=========================
        ==========
    547 	//
    548 	// SBYCON is a 2-bit special function register to control operating mo
        de of MCU
    549 	//		STP   :   HLT
    550 	// 		BIT 1 :  BIT 0
    551 	//  	 0         0     => Program RUN mode (initial value)
    552 	//  	 0         1     => HALT mode
    553 	//  	 1         0     => STOP mode
    554 	//  	 1         1     => (Prohibited)
    555 	// See ML610Q111/ML610Q112 User Manual - Section 4: MCU Control Functi
        on
    556 	//	SBYCON = 0;		// Program RUN mode
    557 	//====================================================================
        ==========
    558 
    559 	//================== VOLTAGE LEVEL SUPERVISOR REGISTER ===============
        ==========
    560 	// 
    561 	// The Q11x mcu's have two channels of VOLTAGE LEVEL SUPERVISORs
    562 	// Accuracy is ±3%
    563 	//
    564 	// The threshold voltages of VLS0 (VDD fall) : 2.85V (Typ. )
    565 	//								  (VDD rise) : 2.92V (Typ. )
    566 	//
    567 	// The threshold voltages of VLS1 (VDD fall) : 4 types selectable 3.3V
        / 3.6V/ 3.9V/ 4.2V (Typ.)
    568 	// The VLS0 can be used as the low voltage level detector reset.
    569 	// 
    570 	// See ML610Q111/ML610Q112 User Manual - Section 22: Voltage Level Sup
        ervisor
    571 	//
    572 	//====================================================================
        ==========
    573 
    574    	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
    575 	// INTERRUPT SETUP...
    576 		//	The ML610Q1xx mcu's have 31 hardware interrupt sources 
    577 		//		 7 External Interrupt Sources
    578 		//		24 Internal Interrupt Sources 
    579 		// EXAMPLE: WDT; VLS; EXTERNAL INT Pins (6); SPI; ADC; I2C (Slave); I
        2C (Master);
    580 		//			TIMERS (6); UART; Comparators (2); PWM's ((4); TBC (4)		

                                                              Page :         16
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    581 	
    582 		irq_di();	// Disable Interrupts
    583 		//irq_init();	// Initialize Interrupts (All Off and NO Requests)
    584 			//==================================================================
        ==
    585 			//FOR NOTES ONLY...This is all taken care of in "irq_init()"
    586 				// INTERRUPT ENABLE REGISTERS...
    587 				//  IE0 = VOLTAGE LEVEL SUPERVISOR Int.
    588 				//  IE1 = EXTERNAL Ints on B3, B2, B1, B0, A2, A1, & A0
    589 				//  IE2 = SPI, A/D, I2C Slave & I2C Master Int.
    590 				//  IE3 = TIMERS 8 & 9 Ints.
    591 				//  IE4 = UART & COMPARATOR Ints.
    592 				//  IE5 = TIMERS A, B, E & F Ints.
    593 				//  IE6 = PWMC, PWMD, PWME, PWMF & 128Hz & 32Hz TBC Ints.
    594 				//  IE7 = 16Hz & 2Hz TBC Ints.
    595 				//IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    596 				//--------------------------------------------------------------
    597 				// INTERRUPT REQUEST FLAG REGISTERS...
    598 				//  IRQ0 = WDT & VLS Int Requests
    599 				//  IRQ1 = EXTERNAL Int Requests
    600 				//  IRQ2 = SPI, A/D, I2C Slave & I2C Master Int Requests
    601 				//  IRQ3 = TIMERS 8 & 9 Int Requests 
    602 				//  IRQ4 = UART & COMPARATOR Int Requests 
    603 				//  IRQ5 = TIMERS A, B, E & F Int Requests 
    604 				//  IRQ6 = PWMC &  128Hz & 32Hz TBC Int Requests 
    605 				//  IRQ7 = 16Hz & 2Hz TBC Int Requests 
    606 				//IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    607 			//==================================================================
        ==
    608 
    609 			// INTERRUPT ENABLE REGISTERS...
    610 				IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    611 
    612 
    613 			// INTERRUPT REQUEST REGISTERS...
    614 				IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    615 
    616 			//------------- SET UP UART Interrupts Handler ---------------------
        ----------------------
    617 				(void)irq_setHdr( (unsigned char)IRQ_NO_UA0INT, _intUart );
    618 					EUA0 = 1; 	// EUA0 is the enable flag for the UART0 interrupt (1=E
        NABLED)
***** main\main.c(617) : Warning : W5027 : Meaningless use of an expression
    619 					QUA0 = 1;	// Request Flag for the UART_0 	INTERRUPT (1=REQUEST, 0-
        NO-REQUEST)
    620 			//------------------------------------------------------------------

                                                              Page :         17
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ----------------------
    621 			
    622  			//------------- SET UP I2C MASTER Interrupts Handler --------------
        -----------------------
    623 				(void)irq_setHdr( (unsigned char)IRQ_NO_I2CMINT, _intI2c );
    624 					EI2CM = 1; // EI2CM is the enable flag for the I2C MASTER interrup
        t (1=ENABLED)
***** main\main.c(623) : Warning : W5027 : Meaningless use of an expression
    625 					QI2CM = 0;
    626 			//------------------------------------------------------------------
        ----------------------
    627 			
    628 			//------------- SET UP ADC Interrupts Handler ----------------------
        ----------------------
    629 				(void)irq_setHdr( (unsigned char)IRQ_NO_SADINT, _intADC );
    630 					ESAD = 1; // ESAD is the enable flag for the ADC interrupt (1=ENAB
        LED)
***** main\main.c(629) : Warning : W5027 : Meaningless use of an expression
    631 					QSAD = 0; // Request Flag for the ADC INTERRUPT (1=REQUEST, 0-NO-R
        EQUEST)
    632 			//------------------------------------------------------------------
        ----------------------
    633 			
    634 /* 			//------------- SET UP  xHz TBC Interrupt (Options: 128Hz, 32Hz, 
        16Hz, 2Hz) --------------
    635 				(void)irq_setHdr( (unsigned char)IRQ_NO_T2HINT, TBC_ISR );  //Clear
         interrupt request flag
    636 					E2H = 1;	  // Enable x Hz TBC Interrupt (1=ENABLED)
    637 					Q2H = 1;	  // Request flag for the time base counter x Hz interrup
        t	
    638 			// -----			
    639 			//------------- TBC...Set Ratio: : 1:1 => 1_1 ----------------------
        ----------------------
    640 				(void)tb_setHtbdiv( (unsigned char)TB_HTD_1_1 ); //Set the ratio of
         dividing frequency of the time base counter
    641 			//------------------------------------------------------------------
        ---------------------- 
    642 			
    643  			//------------- SET UP TIMER 8/9 Interrupt to increment timers ever
        y ~X ms ---------------
    644 				(void)irq_setHdr( (unsigned char)IRQ_NO_TM9INT, TMR89_ISR );  //Cle
        ar interrupt request flag
    645 					ETM8 = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
    646 					ETM9 = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    647 					QTM8 = 1;		// timer 8 IRQ request flag; 1=REQUEST
    648 					QTM9 = 1;		// timer 9 IRQ request flag; 1=REQUEST

                                                              Page :         18
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    649 					T8CS0 = 1;		// 111 => Select PLLCLK
    650 					T8CS1 = 1;
    651 					T8CS2 = 1;
    652 					T9CS0 = 1;		// 111 => Select PLLCLK
    653 					T9CS1 = 1;
    654 					T9CS2 = 1; 
    655 					tm_init(TM_CH_NO_89);
    656 					tm_set89Data(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    657 					tm_set89Source(TM_CS_HTBCLK);
    658 					tm_start89();
    659 					T89M16 = 1;		//1 => sets 16-bit timer mode
    660 				
    661 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    662 					HTD2 = 1;
    663 					HTD1 = 1;
    664 					HTD0 = 1; 
    665 			//------------------------------------------------------------------
        ----------------------
    666 
    667 			
    668 			//------------- SET UP TIMER A/B Interrupt to increment timers every
         ~X ms ---------------
    669 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMBINT, TMRAB_ISR );  //Cle
        ar interrupt request flag
    670 					ETMA = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
    671 					ETMB = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    672 					QTMA = 1;		// timer 8 IRQ request flag; 1=REQUEST
    673 					QTMB = 1;		// timer 9 IRQ request flag; 1=REQUEST
    674 					TACS0 = 1;		// 111 => Select PLLCLK
    675 					TACS1 = 1;
    676 					TACS2 = 1;
    677 					TBCS0 = 1;		// 111 => Select PLLCLK
    678 					TBCS1 = 1;
    679 					TBCS2 = 1; 
    680 					tm_init(TM_CH_NO_AB);
    681 					tm_setABData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    682 					tm_setABSource(TM_CS_HTBCLK);
    683 					tm_startAB();
    684 					TABM16 = 1;		//1 => sets 16-bit timer mode
    685 				
    686 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    687 					HTD2 = 1;

                                                              Page :         19
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    688 					HTD1 = 1;
    689 					HTD0 = 1; 
    690 			//------------------------------------------------------------------
        ----------------------
    691 
    692 			
    693 			//------------- SET UP TIMER E/F Interrupt to increment timers every
         ~X ms ---------------
    694 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMFINT, TMREF_ISR );  //Cle
        ar interrupt request flag
    695 					ETME = 1;	  	// Enable timer E Interrupt (1=ENABLED
    696 					ETMF = 1;	  	// Enable timer F Interrupt (1=ENABLED)
    697 					QTME = 1;		// Timer E IRQ request flag; 1=REQUEST
    698 					QTMF = 1;		// Timer F IRQ request flag; 1=REQUEST
    699 					TECS0 = 1;		// 111 => Select PLLCLK
    700 					TECS1 = 1;
    701 					TECS2 = 1;
    702 					TFCS0 = 1;		// 111 => Select PLLCLK
    703 					TFCS1 = 1;
    704 					TFCS2 = 1;
    705 					tm_init(TM_CH_NO_EF);
    706 					tm_setEFData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    707 					tm_setEFSource(TM_CS_HTBCLK);
    708 					tm_startEF();
    709 					TEFM16 = 1;		//1 => sets 16-bit timer mode
    710 				
    711 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    712 					HTD2 = 1;
    713 					HTD1 = 1;
    714 					HTD0 = 1; 
    715 			//------------------------------------------------------------------
        ----------------------
    716 			
    717 			//------------- SET UP B.3 as an input, and prepare to use as an ext
        ernal interrupt ------
    718 					PB3DIR = 1;
    719 					PB3C1 = 0;
    720 					PB3C0 = 0;
    721 					PB3MD1 = 0;
    722 					PB3MD0 = 0;
    723 					PB3E1 = 1;
    724 					PB3E0 = 0;		//PBnE0-1 are used to choose the Rising-Edge Mode for 
        this interrupt
    725 					PB3SM = 0;

                                                              Page :         20
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    726 			// -----
    727 			//------------- SET UP EXTERNAL INTERRUPT on B.3 -------------------
        ----------------------
    728 			//Options include following pins: A.0; A.1; A.2. B.0; B.1; B.2 & B.3
        
    729 			(void)irq_setHdr( (unsigned char)IRQ_NO_PB3INT, ExtInt_ISR );  //Cle
        ar interrupt request flag
    730 					EPB3 = 0;	//1=> Enables Interrupt
    731 					QPB3 = 0;	//Enables Request Flag (need to set to 
    732 			//------------------------------------------------------------------
        ----------------------  */
    733 	
    734 			
    735 	irq_ei(); // Enable Interrupts
    736 	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII  
    737 
    738 	// ===== UART Initialization =========================================
        =======
    739 	//
    740 	//	Pin PB0 of mcu => RX  
    741 	// 	Pin PB1 of mcu => TX 
    742 	// 
    743 
    744 		
    745 		(void)uart_init( (unsigned char)UART_CS_HSCLK,	// Generator       			
        	
    746 			     (unsigned short)HSCLK_KHZ,				// HSCLK frequency 				
    747 			     &_uartSetParam );						// Parameters from Structure    
    748 		uart_PortSet();									// Set UART Port Pins
***** main\main.c(747) : Warning : W5027 : Meaningless use of an expression
    749 		_flgUartFin = 0;
    750 		uart_stop();
    751 		
    752 		//Now test UART!!
    753 			//Add EOL characters to strings
    754 			HelloWorld[12] 	= 0x0D;  // CR  (Carriage Return)
    755 			HelloWorld[13] 	= 0x0A;	 // LF  (Line Feed)
    756 			
    757 		uart_startSend(HelloWorld, 14, _funcUartFin); // Send, "Hello World!"
        
    758 			while(_flgUartFin != 1){
    759 				NOPx(1);
    760 				main_clrWDT();
    761 			}
    762 	//====================================================================
        =======

                                                              Page :         21
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    763 
    764 	// ===== I2C Initialization ==========================================
        =======
    765 	//	(void)i2c_init(I2C_MOD_FST, (unsigned short)HSCLK_KHZ, I2C_SYN_ON);
        
    766 	//	I20SYN = 1;		//Enable Clock Stretching	
    767 	//====================================================================
        =======
    768 
    769 	// ===== SET UP WATCH DOG TIMER ======================================
        =======
    770 		WDTMOD = 0x03; 	// 0x03=overflow 8sec...
    771 		main_clrWDT(); 	// Clear WDT   
    772 	//====================================================================
        =======
    773 
    774 		
    775 		
    776 }//End Initialization
    777 //=====================================================================
        ======
    778 
    779 
    780 //=====================================================================
        ======
    781 //	OSC set
    782 //=====================================================================
        ======
    783 static void SetOSC(void){
    784 
    785 	//Frequency Control Register 0 (FCON0) 	
    786 	//	used to control the high-speed clock generation circuit and to sele
        ct system clock.
    787 		SYSC0  = 0;			// Used to select the frequency of the HSCLK => 00=8.19
        2MHz.
    788 		SYSC1  = 0;			//...
    789 		OSCM1  = 1;			// 10 => Built-in PLL oscillation mode
    790 		OSCM0  = 0;			//...
    791 		
    792 	// Frequency Control Register 1 (FCON1)
    793 		ENOSC  = 1;			// 1=Enable High Speed Oscillator...
    794 		SYSCLK = 1;			// Select System Clock: 1=HSCLK; 0=LSCLK 
    795 		LPLL   = 1;			// 1=Enables the use of PLL oscillation - ADDED 4/30/20
        13
    796 
    797 	__EI();					//INT enable

                                                              Page :         22
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    798 }
    799 //=====================================================================
        ======
    800 
    801 
    802 //=====================================================================
        ======
    803 //	Analog Comparator setup
    804 //=====================================================================
        ======
    805 void analog_comparator(void){
    806 
    807 //Carl's Notes...
    808 
    809 //Step 1: Select the Interrupt Mode
    810 // 	a.) Interrupt Disabled      => CMPxE1 = 0; CMPxE0 = 0;	  
    811 // 	b.) Falling-Edge Int. Mode  => CMPxE1 = 0; CMPxE0 = 1;
    812 // 	c.) Rising-Edge Int. Mode   => CMPxE1 = 1; CMPxE0 = 0;
    813 // 	d.) Both-Edge Int. Mode     => CMPxE1 = 1; CMPxE0 = 1;
    814 
    815 
    816 //Step 2: Enable the Comparator                       => CMPxEN = 1;	
    817 
    818 //Step 3: Wait 3ms to allow Comparator to stabilize
    819 
    820 //Step 4: Read the comparison result			=> CMPxD: 0= +<-; 1= +>-
    821 
    822 //Step 5: Disable the Comparator				=> CMPxEN = 0;	
    823 
    824 
    825 
    826    //Comparator 0...
    827 	CMP0EN  = 0x01; 	// Comparator ON...
    828 	CMP0E1  = 0x00; 	// No Interupt...
    829 	CMP0E0  = 0x00;
    830 	CMP0SM1 = 0x00; 	// Detect without Sampling... 
    831 	CMP0RFS = 0x01; 	// Differential Input on B5
    832 
    833    //Comparator 0 OFF
    834 	CMP0EN  = 0x00;
    835 
    836 
    837 }
    838 //=====================================================================
        ======
    839 

                                                              Page :         23
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    840 
    841 
    842 //=====================================================================
        ======
    843 //	Clear All 3 Bits of Port A
    844 //=====================================================================
        ======
    845 void PortA_Low(void){
    846 
    847 //Carl's Notes...
    848 
    849 //Step 1: Set Pin Direction...
    850 //Step 2: Set Pin I/O Type...
    851 //Step 3: Set Pin Purpose...
    852 //Step 4: Set Pin Data...
    853 
    854 	//Direction...	
    855 	PA0DIR = 0;		// PortA Bit0 set to Output Mode...
    856 	PA1DIR = 0;		// PortA Bit1 set to Output Mode...
    857 	PA2DIR = 0;		// PortA Bit2 set to Output Mode...
    858 
    859 	//I/O Type...
    860 	PA0C1  = 1;		// PortA Bit0 set to CMOS Output...
    861 	PA0C0  = 1;		
    862 	PA1C1  = 1;		// PortA Bit1 set to CMOS Output...
    863 	PA1C0  = 1;	
    864 	PA2C1  = 1;		// PortA Bit2 set to CMOS Output...
    865 	PA2C0  = 1;	
    866 
    867 	//Purpose...
    868 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose Output...
    869 	PA0MD0  = 0;	
    870 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose Output...
    871 	PA1MD0  = 0;	
    872 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose Output...
    873 	PA2MD0  = 0;	
    874 
    875 	//Data...
    876 	PA0D = 0;		// A.0 Output OFF....
    877 	PA1D = 0;		// A.1 Output OFF....
    878 	PA2D = 0;		// A.2 Output OFF....
    879 
    880 	main_clrWDT(); 	// Clear WDT
    881 
    882 }
    883 //=====================================================================

                                                              Page :         24
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ======
    884 
    885 //=====================================================================
        ======
    886 //	Clear All 8 Bits of Port B
    887 //=====================================================================
        ======
    888 void PortB_Low(void){
    889 
    890 //Carl's Notes...
    891 
    892 //Step 1: Set Pin Direction...
    893 //Step 2: Set Pin I/O Type...
    894 //Step 3: Set Pin Purpose...
    895 //Step 4: Set Pin Data...
    896 
    897 	//Direction...	
    898 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
    899 	PB1DIR = 0;		// PortB Bit1 set to Output Mode...
    900 	PB2DIR = 0;		// PortB Bit2 set to Output Mode...
    901 	PB3DIR = 0;		// PortB Bit3 set to Output Mode...
    902 	PB4DIR = 0;		// PortB Bit4 set to Output Mode...
    903 	PB5DIR = 0;		// PortB Bit5 set to Output Mode...
    904 	PB6DIR = 0;		// PortB Bit6 set to Output Mode...
    905 	PB7DIR = 0;		// PortB Bit7 set to Output Mode...
    906 
    907 	//I/O Type...
    908 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
    909 	PB0C0  = 1;		
    910 	PB1C1  = 1;		// PortB Bit1 set to CMOS Output...
    911 	PB1C0  = 1;	
    912 	PB2C1  = 1;		// PortB Bit2 set to CMOS Output...
    913 	PB2C0  = 1;	
    914 	PB3C1  = 1;		// PortB Bit3 set to CMOS Output...
    915 	PB3C0  = 1;		
    916 	PB4C1  = 1;		// PortB Bit4 set to CMOS Output...
    917 	PB4C0  = 1;	
    918 	PB5C1  = 1;		// PortB Bit5 set to CMOS Output...
    919 	PB5C0  = 1;	
    920 	PB6C1  = 1;		// PortB Bit6 set to CMOS Output...
    921 	PB6C0  = 1;	
    922 	PB7C1  = 1;		// PortB Bit7 set to CMOS Output...
    923 	PB7C0  = 1;	
    924 
    925 	//Purpose...
    926 	PB0MD1  = 0;	// PortB Bit0 set to General Purpose Output...

                                                              Page :         25
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    927 	PB0MD0  = 0;	
    928 	PB1MD1  = 0;	// PortB Bit1 set to General Purpose Output...
    929 	PB1MD0  = 0;	
    930 	PB2MD1  = 0;	// PortB Bit2 set to General Purpose Output...
    931 	PB2MD0  = 0;	
    932 	PB3MD1  = 0;	// PortB Bit3 set to General Purpose Output...
    933 	PB3MD0  = 0;	
    934 	PB4MD1  = 0;	// PortB Bit4 set to General Purpose Output...
    935 	PB4MD0  = 0;	
    936 	PB5MD1  = 0;	// PortB Bit5 set to General Purpose Output...
    937 	PB5MD0  = 0;
    938 	PB6MD1  = 0;	// PortB Bit6 set to General Purpose Output...
    939 	PB6MD0  = 0;	
    940 	PB7MD1  = 0;	// PortB Bit7 set to General Purpose Output...
    941 	PB7MD0  = 0;
    942 
    943 	//Data...
    944 	PB0D = 0;		// B.0 Output OFF....
    945 	PB1D = 0;		// B.1 Output OFF....
    946 	PB2D = 0;		// B.2 Output OFF....
    947 	PB3D = 0;		// B.3 Output OFF....
    948 	PB4D = 0;		// B.4 Output OFF....
    949 	PB5D = 0;		// B.5 Output OFF....
    950 	PB6D = 0;		// B.6 Output OFF....
    951 	PB7D = 0;		// B.7 Output OFF....
    952 
    953 	main_clrWDT(); 	// Clear WDT
    954 
    955 }
    956 //=====================================================================
        ======
    957 
    958 //=====================================================================
        ======
    959 //	Clear All 4 Bits of Port C
    960 //=====================================================================
        ======
    961 void PortC_Low(void){
    962 
    963 //Carl's Notes...
    964 
    965 //Step 1: Set Pin Direction...
    966 //Step 2: Set Pin I/O Type...
    967 //Step 3: Set Pin Purpose...
    968 //Step 4: Set Pin Data...
    969 

                                                              Page :         26
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    970 	//Direction...	
    971 	PC0DIR = 0;		// PortC Bit0 set to Output Mode...
    972 	PC1DIR = 0;		// PortC Bit1 set to Output Mode...
    973 	PC2DIR = 0;		// PortC Bit2 set to Output Mode...
    974 	PC3DIR = 0;		// PortC Bit3 set to Output Mode...
    975 
    976 
    977 	//I/O Type...
    978 	PC0C1  = 1;		// PortC Bit0 set to CMOS Output...
    979 	PC0C0  = 1;		
    980 	PC1C1  = 1;		// PortC Bit1 set to CMOS Output...
    981 	PC1C0  = 1;	
    982 	PC2C1  = 1;		// PortC Bit2 set to CMOS Output...
    983 	PC2C0  = 1;	
    984 	PC3C1  = 1;		// PortC Bit3 set to CMOS Output...
    985 	PC3C0  = 1;		
    986 
    987 	//Purpose...
    988 	PC0MD1  = 0;	// PortC Bit0 set to General Purpose Output...
    989 	PC0MD0  = 0;	
    990 	PC1MD1  = 0;	// PortC Bit1 set to General Purpose Output...
    991 	PC1MD0  = 0;	
    992 	PC2MD1  = 0;	// PortC Bit2 set to General Purpose Output...
    993 	PC2MD0  = 0;	
    994 	PC3MD1  = 0;	// PortC Bit3 set to General Purpose Output...
    995 	PC3MD0  = 0;	
    996 
    997 	//Data...
    998 	PC0D = 0;		// C.0 Output OFF....
    999 	PC1D = 0;		// C.1 Output OFF....
   1000 	PC2D = 0;		// C.2 Output OFF....
   1001 	PC3D = 0;		// C.3 Output OFF....
   1002 
   1003 	main_clrWDT(); 	// Clear WDT
   1004 
   1005 }
   1006 //=====================================================================
        ======
   1007 
   1008 //=====================================================================
        ======
   1009 //	Set All 3 Bits of Port A as Digital Input Pins
   1010 //=====================================================================
        ======
   1011 void PortA_Digital_Inputs(void){
   1012 

                                                              Page :         27
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1013 //Carl's Notes...
   1014 
   1015 //Step 1: Set Pin Direction...
   1016 //Step 2: Set Pin I/O Type...
   1017 //Step 3: Set Pin Purpose...
   1018 //Step 4: Set Pin Data...
   1019 
   1020 	//Direction...	
   1021 	PA0DIR = 1;		// PortA Bit0 set to Input Mode...
   1022 	PA1DIR = 1;		// PortA Bit1 set to Input Mode...
   1023 	PA2DIR = 1;		// PortA Bit2 set to Input Mode...
   1024 
   1025 
   1026 	//I/O Type...
   1027 	PA0C1  = 1;		// PortA Bit0 set to Input with Pull-Up Resistor...
   1028 	PA0C0  = 0;		
   1029 	PA1C1  = 1;		// PortA Bit1 set to Input with Pull-Up Resistor...
   1030 	PA1C0  = 0;	
   1031 	PA2C1  = 1;		// PortA Bit2 set to Input with Pull-Up Resistor...
   1032 	PA2C0  = 0;	
   1033 
   1034 	//Purpose...
   1035 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose I/O...
   1036 	PA0MD0  = 0;	
   1037 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose I/O...
   1038 	PA1MD0  = 0;	
   1039 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose I/O...
   1040 	PA2MD0  = 0;	
   1041 
   1042 	main_clrWDT(); 	// Clear WDT
   1043 
   1044 }
   1045 //=====================================================================
        ======
   1046 
   1047 //=====================================================================
        ======
   1048 //	PWM Output on Port B - Pin 0
   1049 //=====================================================================
        ======
   1050 void PWM_B0_ON(int myPeriod, int myDutyCycle){
   1051 
   1052 		
   1053 		//SET THE PERIOD...
   1054 			PWCP = myPeriod;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 2
        00=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)

                                                              Page :         28
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1055 
   1056 		//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz
   1057 		//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
   1058 		//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
   1059 		//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
   1060 		//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
   1061 		//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	
   1062 			PWCD =    myDutyCycle;		//12    ~  0.25% duty cycle @ 160Hz
   1063 		
   1064 		PCRUN = 1;		// TURN PWM ON
   1065 
   1066 }//END PWM_B0_ON Function
   1067 //=====================================================================
        ======
   1068 
   1069 
   1070 
   1071 //=====================================================================
        ======
   1072 //	PWM Output on Port B - Pin 0
   1073 //=====================================================================
        ======
   1074 void PinB0_PWM(void){
   1075 
   1076 //Carl's Notes...
   1077 
   1078 //Step 1: Set Pin Direction...
   1079 //Step 2: Set Pin I/O Type...
   1080 //Step 3: Set Pin Purpose...
   1081 //Step 4: Select the Clock Mode...
   1082 //Step 5: Set the Duty Cycle...
   1083 //Step 5: Start the PWM Counter...
   1084 
   1085 	//Direction...	
   1086 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
   1087 
   1088 	//I/O Type...
   1089 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
   1090 	PB0C0  = 1;		
   1091 
   1092 	//Purpose...
   1093 	PB0MD1  = 0;	// PortB Bit0 set to PWM Output (0,1)...
   1094 	PB0MD0  = 1;	
   1095 
   1096 
   1097 	//Select the Clock Mode...

                                                              Page :         29
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1098 	PCCS1 = 0;	//00= LS; 01=HS; 10=PLL
   1099 	PCCS0 = 1;
   1100 
   1101 	//SET THE PERIOD...(Added April 4th, 2013)
   1102 	PWCP = 4250;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5
        kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
   1103 
   1104 	//SET THE DUTY CYCLE...(Added April 15th, 2013)
   1105 
   1106 	//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz
   1107 	//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
   1108 	//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
   1109 	//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
   1110 	//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
   1111 	//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	
   1112 	PWCD =    12;		//12    ~  0.25% duty cycle @ 160Hz
   1113 
   1114 	PCRUN = 0;		// OFF to start
   1115 
   1116 }
   1117 //=====================================================================
        ======
   1118 
   1119 
   1120 
   1121 
   1122 
   1123 
   1124 
   1125 
   1126 /**********************************************************************
        *********
   1127 	Routine Name:	NOPms
   1128 	Form:			void NOP1000( unsigned int ms )
   1129 	Parameters:		unsigned int sec = "Number of seconds where the device is
         
   1130 						not doing anything"
   1131 	Return value:	void
   1132 	Description:	NOP for x seconds. Uses HTB* clock (512kHz) and 
   1133 					timer A+B (max 0xFFFF)*(HTBCLK = 1/16 * HSCLK 
   1134 					= (1/16)*8192kHz = 512kHz, see HTBDR to change if 
   1135 					we need an even smaller increment timer...)
   1136 					1/(512kHz) * 0xFFFF = 127ms
   1137 					
   1138 ***********************************************************************
        *******/

                                                              Page :         30
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1139 /* 
   1140 	void NOPms( unsigned int ms )
   1141 	{
   1142 	unsigned int timerThres;
   1143 	unsigned char TimeFlag;
   1144 	unsigned int TempSec;
   1145 	unsigned int timer;
   1146 	unsigned int timertest;
   1147 
   1148 		TempSec = ms;
   1149 		TimeFlag = 0;
   1150 
   1151 		tm_init(TM_CH_NO_AB);
   1152 		tm_setABSource(TM_CS_HTBCLK);
   1153 		tm_setABData(0xffff);
   1154 
   1155 		if(ms < 128){
   1156 			timerThres = 0x1FF * ms;
   1157 			TimeFlag = 0;
   1158 		}
   1159 		if(ms == 128){
   1160 			timerThres = 0xFFFF;
   1161 			TimeFlag = 0;
   1162 		}
   1163 		if(ms > 128){
   1164 			while(TempSec > 128){
   1165 				TempSec -= 128;
   1166 				TimeFlag++;
   1167 			}
   1168 			if(TempSec != 0){
   1169 				timerThres = 0x1FF * TempSec;
   1170 			}
   1171 			else{
   1172 				timerThres = 0xFFFF;
   1173 				TimeFlag--;
   1174 			}
   1175 		}
   1176 
   1177 	TimerRestart:
   1178 		main_clrWDT();	
   1179 		//tm_restart89();	//using LSCLK, the maximum delay time we have is ~2
         secs
   1180 		tm_startAB();
   1181 		timer = tm_getABCounter();
   1182 		while(timer < timerThres){
   1183 			timer = tm_getABCounter();

                                                              Page :         31
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1184 			timertest = timer;
   1185 		}
   1186 		if(TimeFlag !=0){
   1187 			tm_stopAB();
   1188 			TimeFlag--;
   1189 			timerThres = 0xFFFF;
   1190 			goto TimerRestart;
   1191 		}
   1192 	} //End NOPms 
   1193 */
   1194 
   1195 /**********************************************************************
        *********
   1196 	Routine Name:	_funcUartFin
   1197 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1198 	Parameters:		unsigned int size		 : 
   1199 					unsigned char errStat	 : 
   1200 	Return value:	void
   1201 	Description:	UART transmission completion callback function.
   1202 ***********************************************************************
        *******/
   1203 static void _funcUartFin( unsigned int size, unsigned char errStat )
   1204 {
   1205 	uart_continue();						// Function in UART.c: process to continue send 
        & receive...
   1206 	_flgUartFin = (unsigned char)FLG_SET;
   1207 	main_reqNotHalt();						// uncommented 5/2/2013
   1208 }
   1209 
   1210 /**********************************************************************
        *********
   1211 	Routine Name:	_funcI2CFin
   1212 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1213 	Parameters:		unsigned int size		 : 
   1214 					unsigned char errStat	 : 
   1215 	Return value:	void
   1216 	Description:	UART transmission completion callback function.
   1217 ***********************************************************************
        *******/
   1218 static void _funcI2CFin( unsigned int size, unsigned char errStat )
***** main\main.c(1208) : Warning : W5025 : 'errStat': unreferenced formal para
        meter
***** main\main.c(1208) : Warning : W5025 : 'size': unreferenced formal paramet
        er

                                                              Page :         32
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1219 {
   1220 	i2c_continue();							// Function in UART.c: process to continue send 
        & receive...
   1221 	_flgI2CFin = (unsigned char)FLG_SET;
   1222 	main_reqNotHalt();						// uncommented 5/2/2013
   1223 }
   1224 
   1225 /**********************************************************************
        *********
   1226 	Routine Name:	_intI2c
   1227 	Form:			static void _intI2c( void )
   1228 	Parameters:		void
   1229 	Return value:	void
   1230 	Description:	I2C handler.
   1231 ***********************************************************************
        *******/
   1232 static void _intI2c( void )
***** main\main.c(1223) : Warning : W5025 : 'errStat': unreferenced formal para
        meter
***** main\main.c(1223) : Warning : W5025 : 'size': unreferenced formal paramet
        er
   1233 {
   1234 	(void)i2c_continue();
   1235 	main_reqNotHalt();
***** main\main.c(1234) : Warning : W5027 : Meaningless use of an expression
   1236 }
   1237 
   1238 /**********************************************************************
        *********
   1239 	Routine Name:	_intADC
   1240 	Form:			static void _intADC( void )
   1241 	Parameters:		void
   1242 	Return value:	void
   1243 	Description:	I2C handler.
   1244 ***********************************************************************
        *******/
   1245 static void _intADC( void )
   1246 {
   1247 	_flgADCFin = 1;
   1248 }
   1249 
   1250 /**********************************************************************
        *********
   1251 	Routine Name:	main_reqNotHalt
   1252 	Form:			void reqNotHalt( void )
   1253 	Parameters:		void

                                                              Page :         33
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1254 	Return value:	void
   1255 	Description:	request not halt.
   1256 ***********************************************************************
        *******/
   1257 void main_reqNotHalt( void )
   1258 {
   1259 	_reqNotHalt = (unsigned char)FLG_SET;
   1260 }
   1261 
   1262 /**********************************************************************
        *********
   1263 	Routine Name:	_intUart
   1264 	Form:			static void _intUart( void )
   1265 	Parameters:		void
   1266 	Return value:	void
   1267 	Description:	UART handler.
   1268 ***********************************************************************
        *******/
   1269 static void _intUart( void )
   1270 {
   1271 	uart_continue(); 	//in UART.c: process to continue send and receive...
        
   1272 }
   1273 
   1274 
   1275 //=====================================================================
        ======
   1276 //INTERRUPT SERVICE ROUTINE FOR TBC
   1277 static void TBC_ISR( void ) 
   1278 {
   1279 	//Your Code Here...
   1280 	LED6_pin ^= 1; 
   1281 }
   1282 //=====================================================================
        ======
   1283 
   1284 //=====================================================================
        ======
   1285 //INTERRUPT SERVICE ROUTINE FOR Timer8/9
   1286 static void TMR89_ISR( void ) 
   1287 {
   1288 	//Your Code Here...
   1289 	//LED1_pin ^= 1;
   1290 	LED2_pin ^= 1;
   1291 	tm_init(TM_CH_NO_89);
   1292 	tm_start89();		//Clear & Restart Timer...

                                                              Page :         34
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1293 }
   1294 //=====================================================================
        ======
   1295 
   1296 //=====================================================================
        ======
   1297 //INTERRUPT SERVICE ROUTINE FOR TimerA/B
   1298 static void TMRAB_ISR( void ) 
   1299 {
   1300 	//Your Code Here...
   1301 	//LED4_pin ^= 1;
   1302 	LED5_pin ^= 1;
   1303 	tm_init(TM_CH_NO_AB);
   1304 	tm_startAB();		//Clear & Restart Timer...
   1305 }
   1306 //=====================================================================
        ======
   1307 
   1308 //=====================================================================
        ======
   1309 //INTERRUPT SERVICE ROUTINE FOR TimerE/F
   1310 static void TMREF_ISR( void ) 
   1311 {
   1312 	//Your Code Here...
   1313 	//LED7_pin ^= 1;
   1314 	LED8_pin ^= 1;
   1315 	tm_init(TM_CH_NO_EF);
   1316 	tm_startEF();		//Clear & Restart Timer...
   1317 }
   1318 //=====================================================================
        ======
   1319 
   1320 
   1321 //=====================================================================
        ======
   1322 // ----- ISR for External Interrupt Pin 
   1323 static void ExtInt_ISR( void ) 
   1324 {
   1325 	//Your Code Here...
   1326 	LED9_pin ^= 1;
   1327 	
   1328 }
   1329 //=====================================================================
        ======
   1330 
   1331 //=====================================================================

                                                              Page :         35
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        ======
   1332 void NOPx( unsigned int MyCount )
   1333 {
   1334 unsigned int ONCNT = 0;
   1335 unsigned int xxx;
   1336 
   1337 xxx = MyCount;
   1338 
   1339 	while(ONCNT < xxx) {	// NOP for "xxx" Cycles
   1340 		ONCNT++;
   1341 	}
   1342 	ONCNT = 0;			// Reset Counter 
   1343 }
   1344 //=====================================================================
        ======
   1345 
   1346 //=====================================================================
        ======
   1347 void MyUART_Send(void){
   1348 	int i;
   1349 
   1350 	
   1351 	for(i = 0; i<50; i++)
   1352 	{
   1353 		MyTx[i] = 0x20;		// Clear Data Array...
   1354 	}
   1355 
   1356 	sprintf(MyTx, "%f,%f,%f", Sensor1_Data, Sensor2_Data, Sensor3_Data);
   1357 	
   1358 	MyTx[148] = 0x0D;	//CR
   1359 	MyTx[149] = 0x0A;	//LF
   1360 	
   1361 	//Send Returned Sensor Output to PC!
   1362 	_flgUartFin = 0;
   1363 	uart_stop();
   1364 	uart_startSend(MyTx, 50, _funcUartFin);
   1365 	while(_flgUartFin != 1){
   1366 		main_clrWDT();
   1367 	}
   1368 }
   1369 //=====================================================================
        ======
   1370 
   1371 
   1372 //=====================================================================
        ======

                                                              Page :         36
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1373 void MyUART_Receive(void){
   1374 	
   1375 		//Begin UART Receive
   1376 		_flgUartFin = 0;
   1377 		uart_stop();
   1378 		uart_startReceive(MyRx, 50, _funcUartFin);
   1379 		while(_flgUartFin != 1){
   1380 			main_clrWDT();
   1381 		}
   1382 		
   1383 		if(MyRx[0] == 0x44){			//if MyRx == "DD" for Data Dump
   1384 			if(MyRx[1] == 0x44){
   1385 			//...your code here...	
   1386 			}
   1387 		}
   1388 }
   1389 //=====================================================================
        ======
   1390 
   1391 
   1392 
   1393 //=====================================================================
        ======
   1394 //Simple function to demonstrate Serial LCD
   1395 void SerialLCDSplash (void)
   1396 {
   1397 	SendLCDCmd(LCD_Display_ON_NoBlink);
   1398 	SendLCDCmd(LCD_Backlight_ON);
   1399 	SendLCDCmd(LCD_HOME);
   1400 
   1401 	uartSendStr( ClearLCD,(unsigned char)ClearLCD_LEN);
   1402 	uartSendStr( WelcomeString,(unsigned char)WelcomeString_LEN);
   1403 }
   1404 //=====================================================================
        ======
   1405 
   1406 //=====================================================================
        ======
   1407 //Simple function to REFRESH/CLEAR Serial LCD Screen
   1408 void ClearSerialLCD (void)
   1409 {
   1410 	SendLCDCmd(LCD_Display_ON_NoBlink);
   1411 	SendLCDCmd(LCD_Backlight_ON);
   1412 	SendLCDCmd(LCD_HOME);
   1413 	uartSendStr( ClearLCD,(unsigned char)ClearLCD_LEN);
   1414 }

                                                              Page :         37
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1415 //=====================================================================
        ======
   1416 
   1417 //=====================================================================
        ======
   1418 //Simple function to send commands to Serial LCD
   1419 void SendLCDCmd(unsigned char LCDcmd)
   1420 {
   1421 	U0IO = 0; 		// 0 = Transmit mode (initial value)			
   1422 	UA0BUF = LCDcmd;	// Load LCDcmd into Buffer...
   1423 	U0EN = 1;		// START COMMUNICATION...		
   1424 
   1425 	while(U0EN != 0)	// In transmit mode, this bit is automatically set to
         0 at termination of transmission.
   1426 	{
   1427 		;
   1428 	}
   1429 
   1430 
   1431 	QUA0 = 0;		//QUA0 is the request flag for the UART0 interrupt
   1432 }
   1433 //=====================================================================
        ======
   1434 
   1435 //=====================================================================
        ======
   1436 void LCD_Init(void){
   1437 	int i;
   1438 
   1439 	
   1440 	for(i = 0; i<200; i++)
   1441 	{
   1442 		MyData[i] = 0x20;		// Clear Data Array...
   1443 	}
   1444 
   1445 
   1446 	//1.) Display ON - NO BLINK; 
   1447 	//2.) Turn ON Back-Light
   1448 	//3.) Move Cursor to Home
   1449 	//sprintf(MyData, "%u, %u, %u", LCD_Display_ON_NoBlink, LCD_Backlight_
        ON, LCD_HOME);
   1450 	sprintf("%u", LCD_Backlight_ON);
***** main\main.c(1450) : Warning : W5002 : 'argument' : different levels of in
        direction
   1451 	
   1452 	

                                                              Page :         38
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1453 	//uartSendStr( ClearLCD,(unsigned char)ClearLCD_LEN);
   1454 	//uartSendStr( WelcomeString,(unsigned char)WelcomeString_LEN);
   1455 
   1456 
   1457 
   1458 	//sprintf(MyData, "%f,%f,%f", Sensor1_Data, Sensor2_Data, Sensor3_Data
        );
   1459 	
   1460 	//MyData[148] = 0x0D;	//CR
   1461 	//MyData[149] = 0x0A;	//LF
   1462 	
   1463 	//Send Returned Sensor Output to PC!
   1464 	_flgUartFin = 0;
   1465 	uart_stop();
   1466 	uart_startSend(MyData, 200, _funcUartFin);
   1467 	while(_flgUartFin != 1){
   1468 		main_clrWDT();
   1469 	}
   1470 }
   1471 //=====================================================================
        ======
   1472 	
   1473 
   1474 ***** main\main.c(1474) : Warning : W5030 : 'tm_get89Counter': unreferenced sta
        tic function
***** main\main.c(1474) : Warning : W5030 : 'ExtInt_ISR': unreferenced static f
        unction
***** main\main.c(1474) : Warning : W5030 : 'tm_getEFSource': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_getABSource': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_get89Source': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_restartAB': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'tm_clrABCounter': unreferenced sta
        tic function
***** main\main.c(1474) : Warning : W5030 : 'tm_restartEF': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'tm_clrEFCounter': unreferenced sta
        tic function
***** main\main.c(1474) : Warning : W5030 : 'TBC_ISR': unreferenced static func
        tion
***** main\main.c(1474) : Warning : W5030 : 'tm_getABCounter': unreferenced sta
        tic function

                                                              Page :         39
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

***** main\main.c(1474) : Warning : W5030 : 'tm_setABData': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'tm_getEFCounter': unreferenced sta
        tic function
***** main\main.c(1474) : Warning : W5030 : 'TMRAB_ISR': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : 'tm_stop89': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : 'tm_stopEF': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : 'tm_stopAB': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : 'tm_setAOneshot': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_setBOneshot': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_set9Oneshot': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_set8Oneshot': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_set89Data': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'tm_setEFSource': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_setABSource': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'tm_set89Source': unreferenced stat
        ic function
***** main\main.c(1474) : Warning : W5030 : 'TMR89_ISR': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : 'tm_setEFData': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'TMREF_ISR': unreferenced static fu
        nction
***** main\main.c(1474) : Warning : W5030 : '_funcI2CFin': unreferenced static 
        function
***** main\main.c(1474) : Warning : W5030 : 'tm_clr89Counter': unreferenced sta
        tic function
***** main\main.c(1474) : Warning : W5030 : 'tb_setHtbdiv': unreferenced static
         function
***** main\main.c(1474) : Warning : W5030 : 'tm_restart89': unreferenced static
         function



Error(s)     :  0
Warning(s)   :  55



                                                              Page :         40
                                                              Date : 07-16-2014
                                                              Time :   18:59:06
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c



                            STACK INFORMATION
                            -----------------

  FUNCTION                         LOCALS    CONTEXT    OTHERS    TOTAL
  --------                         ------    -------    ------    -----
  _main                            0         0          2         2         
  _main_clrWDT                     0         0          0         0         
  _Initialization                  0         2          2         4         
  _SetOSC                          0         0          0         0         
  _analog_comparator               0         0          0         0         
  _PortA_Low                       0         0          0         0         
  _PortB_Low                       0         0          0         0         
  _PortC_Low                       0         0          0         0         
  _PortA_Digital_Inputs            0         0          0         0         
  _PWM_B0_ON                       0         0          0         0         
  _PinB0_PWM                       0         0          0         0         
  __funcUartFin                    0         2          0         2         
  __funcI2CFin                     0         2          0         2         
  __intI2c                         0         2          0         2         
  __intADC                         0         0          0         0         
  _main_reqNotHalt                 0         0          0         0         
  __intUart                        0         0          0         0         
  _TBC_ISR                         0         0          0         0         
  _TMR89_ISR                       0         2          0         2         
  _TMRAB_ISR                       0         2          0         2         
  _TMREF_ISR                       0         2          0         2         
  _ExtInt_ISR                      0         0          0         0         
  _NOPx                            4         4          0         8         
  _MyUART_Send                     2         4          10        16        
  _MyUART_Receive                  0         2          2         4         
  _SerialLCDSplash                 0         2          0         2         
  _ClearSerialLCD                  0         2          0         2         
  _SendLCDCmd                      0         0          0         0         
  _LCD_Init                        2         4          4         10        
