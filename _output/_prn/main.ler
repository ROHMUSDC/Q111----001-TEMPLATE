
                                                              Page :          1
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

      1 //*********************************************************************
        ********
      2 //
      3 // USDC TEMPLATE FIRMWARE for Q111 MCU  
      4 //
      5 // Program:	 LAPIS MCU Development Board Demo Code 
      6 //
      7 // Purpose:	 Demonstration Code for use with LAPIS MCU Development Boar
        d 
      8 //
      9 // This single Example code Demonstrates all the following modules work
        ing: 
     10 //		 1.) MCU Initialization (OSC; PORTS; PERIPHERIALS; WDT; etc.) 
     11 //		 2.) Demo of 2Hz INTERRUPT on TBC
     12 //		 3.) Demo of Timer-overflow INTERRUPTS on TMR 8/9
     13 //		 4.) Demo of Timer-overflow INTERRUPTS on TMR A/B
     14 //		 5.) Demo of Timer-overflow INTERRUPTS on TMR E/F
     15 //		 6.) Demo of Hardware PWM Control 
     16 //		 7.) UART TX Demo 
     17 //		 8.) UART RX Demo
     18 //		 9.) Serial LCD Demo
     19 //		10.) PIR Sensor Motion Detection
     20 //		11.) HALL Sensor Magnetic Field Detection
     21 //		12.) ADC Demo...
     22 //		13.) I2C Master Demo...    
     23 //
     24 // Authors:	 C. Schell, K. Bahar & F. Lee 
     25 //		 	 ROHM Semiconductor USA, LLC
     26 //		 	 US Design Center
     27 //
     28 // Notes: 	
     29 //		1.) RTLU8 RUNTIME LIBRARIES:
     30 //				RTLU8 is a C runtime library for mcu's that use the LAPIS nX-U8 a
        s the CPU core
     31 //				RTLU8 provides a large number of routines that can be used when p
        rogramming 
     32 //				in C. Much effort and time can be saved by using these library ro
        utines.
     33 //				For Example, to use the sprintf library for UART commands, you ne
        ed to add 
     34 //				the "LU8100SW.lib" RT Library. To do this open the LAPIS IDE & se
        lect:
     35 //				'Project -> Options -> Target' from the menu bar.  In the "Genera
        l" Tab, 
     36 //				type in "LU8100SW.lib" to add the RTLU8 runtime library for small
         memory 

                                                              Page :          2
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

     37 //				model containing sprintf and many other routines
     38 //		2.) CHECKING THE PROGRAM SIZE:
     39 //				You can check the program size from the map file generated during
         "Compile" step by the Linker. 
     40 //				Please refer to CCU8 programming guide: (3.1. Map Files and 3.1.4
        . Program and Data size)
     41 //				Results will look something like this:
     42 //					Program and Data Sizes
     43 //					This portion of the map file gives aggregate program and data si
        zes for each segment type.
     44 //						Total size (CODE  ) = 02CE4   (11492)
     45 //						Total size (DATA  ) = 002E7   (743)
     46 //						Total size (BIT   ) = 00000.0 (0.0)
     47 //						Total size (NVDATA) = 00000   (0)
     48 //						Total size (NVBIT ) = 00000.0 (0.0)
     49 //						Total size (TABLE ) = 0828A   (33418)
     50 //
     51 // Started:  April 6th, 2013
     52 // Updated:	 JULY 29th, 2014
     53 //*********************************************************************
        ********
     54 
     55 // ================================ ML610Q111 =========================
        ======== 
     56 //	ML610Q111 MCU PINOUT - TSSOP20 Package
     57 //
     58 // 		Pin 01 of mcu => PC0 / TM9OUT / PWMF0 
     59 // 		Pin 02 of mcu => RESET_N
     60 // 		Pin 03 of mcu => TEST
     61 // 		Pin 04 of mcu => PB0 / CMP1OUT / OUTCLK / PWMC / RXD0 / AIN2 / EXI
        4
     62 // 		Pin 05 of mcu => PB1 / TXD1 / TXD0 / PWMD / AIN3 / EXI5 
     63 // 		Pin 06 of mcu => PB2 / PWME / RXD1 / EXI6 
     64 // 		Pin 07 of mcu => PB3 / TXD1 / SIN / EXI7 
     65 // 		Pin 08 of mcu => PA2 / CMP0OUT / CLKIN / PWME / EXI2 
     66 // 		Pin 09 of mcu => TESTF
     67 // 		Pin 10 of mcu => PC3 / TMFOUT
     68 
     69 // 		Pin 11 of mcu => PC2 / PWMF2 
     70 // 		Pin 12 of mcu => PA1 / EXI1 / AIN1 / CMP1P / PWMD / LSCLK / TMFOUT
        
     71 // 		Pin 13 of mcu => PB4 / CMP0P / SOUT / TXD0 / TXD1
     72 // 		Pin 14 of mcu => PB5 / CMP0M / RXD0 / SCK / SCL / PWMF2
     73 // 		Pin 15 of mcu => PB6 / AIN4 / CLKIN / SDA / PWMF1
     74 // 		Pin 16 of mcu => VSS
     75 // 		Pin 17 of mcu => VDD

                                                              Page :          3
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

     76 // 		Pin 18 of mcu => PB7 / AIN5 / RXD1 / LSCLK / PWMF0 / PWMC
     77 // 		Pin 19 of mcu => PA0 / EXI0 / AIN0 / PWMC / OUTCLK / TM9OUT
     78 // 		Pin 20 of mcu => PC1 / PWMF1
     79 //
     80 //=====================================================================
        ========
     81 
     82 //*********************************************************************
        ********
     83 // Microcontroller's connections on the LAPIS MCU Development Board to 
        the 
     84 //  Plug 'n Play, Raspberry Pi Compatible, Universal Connectors:
     85 //
     86 // Pin-01 => 3.3V Power					Pin-02 => 5.0V Power (VBUS)
     87 // Pin-03 => I2C-SDA  (Q111 I/O B.6)	Pin-04 => no connection
     88 // Pin-05 => I2C-SCL  (Q111 I/O B.5)*	Pin-06 => GROUND
     89 // Pin-07 => no connection*				Pin-08 => UART-TX  (Q111 I/O B.1)
     90 // Pin-09 => no connection				Pin-10 => UART-RX  (Q111 I/O B.0) 
     91 // Pin-11 => GPIO #17 (Q111 I/O A.0)	Pin-12 => GPIO #18 (Q111 I/O B.7)
     92 // Pin-13 => GPIO #21 (Q111 I/O A.1)	Pin-14 => no connection
     93 // Pin-15 => GPIO #22 (Q111 I/O A.2)	Pin-16 => GPIO #23 (Q111 I/O C.2)
     94 // Pin-17 => no connection				Pin-18 => GPIO #24 (Q111 I/O C.3)
     95 // Pin-19 => SPI-MOSI (Q111 I/O B.4)	Pin-20 => no connection
     96 // Pin-21 => SPI-MISO (Q111 I/O B.3)	Pin-22 => GPIO #25 (Q111 I/O B.2)
     97 // Pin-23 => SPI-SCLK (Q111 I/O B.5)*	Pin-24 => SPI-CS0  (Q111 I/O C.0)
        
     98 // Pin-25 => no connection				Pin-26 => SPI-CS1  (Q111 I/O C.1)
     99 // 
    100 //=====================================================================
        ========
    101 //*********************************************************************
        ********
    102 
    103 //*********************************************************************
        ********
    104 // Q111 Microcontroller's I/O Pins at J3 on the LAPIS MCU Development B
        oard 
    105 //
    106 // Pin-01 => A.0				Pin-02 => A.1
    107 // Pin-03 => A.2				Pin-04 => B.0
    108 // Pin-05 => B.1				Pin-06 => B.2
    109 // Pin-07 => B.3				Pin-08 => B.4
    110 // Pin-09 => B.5				Pin-10 => B.6 
    111 // Pin-11 => B.7				Pin-12 => C.0
    112 // Pin-13 => C.1				Pin-14 => C.2
    113 // Pin-15 => C.3				Pin-16 => GROUND

                                                              Page :          4
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    114 //
    115 //=====================================================================
        ========
    116 //*********************************************************************
        ********
    117 
    118 
    119 //***** PREPROCESSOR DIRECTIVES ***************************************
        ********
    120  // INCLUDED FILES...
    121 	#include	<ML610111.H>	// Lapis Micro ML610Q111 on LAPIS MCU Developmen
        t Board
    122 	#include	<stdlib.h>		// General-purpose utilities
    123 	#include	<stdio.h>		// I/O-related processing
    124 	#include 	<common.h>		// Common Definitions
    125 	#include 	<irq.h>			// IRQ Definitions
    126 	#include 	<mcu.h>			// MCU Definition
    127 	#include	<i2c.h>			// I2C Definition
    128 	#include 	<tbc.h>			// Set TBC (Timer Based Clock) API
    129 	#include 	<timer.h>		// Timer Macros & APIs
    130 	#include	<math.h>		// Mathematical functions
    131 	#include 	<uart.h>		// UART Function Prototypes	
    132 	//#include	<float.h>		// Numerical limits for floating-point numbers	
    133 	//#include	<string.h>		// Character string manipulation routines
    134 	//#include	<yvals.h>		// Called for by most Header Files
    135 
    136 	//#include 	<main.h>		// Clear WDT API
    137 	//#include	<ctype.h>		// Character classification and conversion 
    138 	//#include	<errno.h>		// Error identifiers Library
    139 	//#include	<limits.h>		// Numerical limits for integers
    140 	//#include	<muldivu8.h>	// Multiplication and Division accelerator
    141 	//#include	<setjmp.h>		// Global jump (allow jumps to locations outsid
        e the current function) 
    142 	//#include	<signal.h>		// Signal handling functions
    143 	//#include	<stdarg.h>		// Variable numbers of arguments
    144 	//#include	<stddef.h>		// Standard types and macros 
    145 	//#include	<yfuns.h>		//  
    146 	
    147 //*********************************************************************
        ********
    148  // I/O PIN DATA ALIASES...
    149 // Connections for Q111 Universal Socket
    150 	#define RX 			PB0D 
    151 	#define TX 			PB1D
    152  
    153 	#define I2C_SDA 	PB6D 

                                                              Page :          5
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    154 	#define I2C_SCL 	PB5D 
    155 
    156 	#define GPIO_17		PA0D
    157 	#define GPIO_21		PA1D
    158 	#define GPIO_22		PA2D
    159 	#define GPIO_18		PB7D
    160 	#define GPIO_23		PC2D
    161 	#define GPIO_24		PC3D
    162 	#define GPIO_25		PB2D
    163 
    164 	#define SPI_MOSI	PB4D
    165 	#define SPI_MISO	PB3D
    166 	#define SPI_SCL 	PB5D
    167 	#define SPI_CS0		PC0D
    168 	#define SPI_CS1 	PC1D 	
    169 
    170 	
    171 	//LED's in DICE PATTERN...	
    172 		// ====== DICE ======
    173 		//	1	2	3
    174 		//
    175 		//	4	5	6
    176 		//
    177 		//	7	8	9
    178 		// ==================
    179 		#define LED1_pin		PC1D	//2013-04-18 (LaPi Plug 'n Play Board)
    180 		#define LED2_pin		PC3D	//2013-04-18 (LaPi Plug 'n Play Board)
    181 		//#define LED3_pin		PB0D	//2013-04-18 (LaPi Plug 'n Play Board)
    182 		#define LED4_pin		PC0D	//2013-04-18 (LaPi Plug 'n Play Board)
    183 		#define LED5_pin		PC2D	//2013-04-18 (LaPi Plug 'n Play Board)
    184 		#define LED6_pin		PB5D	//2013-04-18 (LaPi Plug 'n Play Board)
    185 		#define LED7_pin		PB2D	//2013-04-18 (LaPi Plug 'n Play Board)
    186 		#define LED8_pin		PB7D	//2013-04-18 (LaPi Plug 'n Play Board)
    187 		#define LED9_pin		PB6D	//2013-04-18 (LaPi Plug 'n Play Board)
    188 	
    189 	//ANALOG INPUTS...
    190 		#define Acc_Temp_sig_pin	PA0D	//2013-04-18 (LaPi Plug 'n Play Board)
    191 		#define Acc_Y_sig_pin		PA1D	//2013-04-18 (LaPi Plug 'n Play Board)
    192 		#define Acc_X_sig_pin		PA2D	//2013-04-18 (LaPi Plug 'n Play Board)
    193 	
    194 	//Misc. Connections...
    195 		#define Hall_sig_pin		PB3D	//2013-04-18 (LaPi Plug 'n Play Board)
    196 		#define PIR_pin				PB4D	//2013-04-18 (LaPi Plug 'n Play Board)
    197 	
    198 	// ===== Commands for Parallax Serial LCD Display =====
    199 		#define LCD_FormFeedClear		(  12U )

                                                              Page :          6
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    200 		#define LCD_CarriageReturn		(  13U )
    201 		#define LCD_Display_OFF			(  21U )
    202 		#define LCD_Display_ON_NoBlink	(  22U )
    203 		#define LCD_Display_ON 			(  25U )
    204 		#define LCD_Backlight_ON 		(  17U )
    205 		#define LCD_Backlight_OFF 		(  18U )
    206 		#define LCD_HOME 				( 128U )
    207 		#define LCD_Line2				( 148U )
    208 	
    209 //*********************************************************************
        ********
    210 //=====================================================================
        ======
    211 //   MACROS: 
    212 //=====================================================================
        ======
    213 
    214 // ===== Peripheral setting.=====
    215 	#define HSCLK_KHZ	( 8192u )	// 8MHz = 8000kHz (will be multiplied by 1
        024 to give 8,192,000Hz)
    216 	#define FLG_SET	    ( 0x01u ) 	
    217 
    218 // ===== SET DESIRED UART SETTINGS HERE! (Options in UART.h) ==========
        ======
    219 	#define UART_BAUDRATE		( UART_BR_9600BPS) 	// Data Bits Per Second - T
        ested at rates from 2400bps to 512000bps!
    220 	#define UART_DATA_LENGTH	( UART_LG_8BIT )		// x-Bit Data
    221 	#define UART_PARITY_BIT		( UART_PT_NON )			// Parity
    222 	#define UART_STOP_BIT		( UART_STP_1BIT )		// x Stop-Bits
    223 	#define UART_LOGIC			( UART_NEG_POS )		// Desired Logic
    224 	#define UART_DIRECTION		( UART_DIR_LSB )		// LSB or MSB First 
    225 
    226 	// ===== STRUCTURE for UART Settings =====
    227 		static const tUartSetParam  _uartSetParam = {		// UART Parameters
    228 			UART_BAUDRATE,						// Members of Structure...
    229 			UART_DATA_LENGTH,					// Members of Structure...
    230 			UART_PARITY_BIT,					// Members of Structure...
    231 			UART_STOP_BIT,						// Members of Structure...
    232 			UART_LOGIC,							// Members of Structure...
    233 			UART_DIRECTION						// Members of Structure...
    234 		};
    235 //=====================================================================
        ======
    236 
    237 
    238 

                                                              Page :          7
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    239 //*********************************************************************
        ********
    240 //=====================================================================
        ======
    241 //Other STRUCTURES: 
    242 //=====================================================================
        ======
    243 	//Example Structure Declaration
    244 	typedef struct {
    245 		unsigned char state     : 1;
    246 		unsigned char state_sub : 2;
    247 		unsigned char reserve   : 5;
    248 	} STRUCT_STATE;	 
    249 
    250 //*********************************************************************
        ********
    251 
    252 
    253 //*********************************************************************
        ********
    254 //=====================================================================
        ======
    255 //   FUNCTION PROTOTYPES: 
    256 //	Establishes the name and return type of a function and may specify t
        he 
    257 // 	types, formal parameter names and number of arguments to the functi
        on                                 
    258 //=====================================================================
        ======
    259 	void main_clrWDT( void );				// no return value and no arguments
    260 	void Initialization( void );			// no return value and no arguments
    261 	void SetOSC( void );					// no return value and no arguments
    262 
    263 	static void NOPms(unsigned int ms);		// no return value - Delay in ms 
        as Argument
    264 	void NOPx( unsigned int MyCount );		// no return value - Count in ms a
        s Argument
    265 	void PWM_B0_ON(int myPeriod, int myDutyCycle);		// no return value - P
        eriod & DutyCycle Variables as Arguments
    266 
    267 	void analog_comparator( void );			
    268 	void PortA_Low( void );					// no return value and no arguments
    269 	void PortB_Low( void );					// no return value and no arguments
    270 	void PortC_Low( void );					// no return value and no arguments
    271 	void PortA_Digital_Inputs( void );		// no return value and no argument
        s

                                                              Page :          8
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    272 	void PinB0_PWM( void ); 				// no return value and no arguments
    273 	void main_reqNotHalt( void );			// no return value and no arguments
    274 
    275 	static void _initPeri( void );
    276 	static void _intWdt( void );
    277 	static void _intTimer( void );
    278 
    279 	void _funcUartFin( unsigned int size, unsigned char errStat );
    280 	void _intUart( void );
    281 
    282 	void _funcI2CFin( unsigned int size, unsigned char errStat );
    283 	void checkI2C( void );
    284 	void _intI2c( void );
    285 
    286 	void _intADC( void );
    287 	
    288 	void TBC_ISR( void );			// TBC Interrupt Service Routine...
    289 	void TMR89_ISR( void );			// TIMER 8/9 Interrupt Service Routine...
    290 	void TMRAB_ISR( void );			// TIMER A/B Interrupt Service Routine...
    291 	void TMREF_ISR( void );			// TIMER E/F Interrupt Service Routine...
    292 	void ExtInt_ISR( void );		// External Interrupt Interrupt Service Rout
        ine...
    293 	
    294 	void NOPms( unsigned int ms );	// no return value; "ms" in millisecond
        s as Argument
    295 	
    296 	void SerialLCD_Init_and_Clear (void);	// no return value and no argume
        nts 
    297 
    298 	void UART_TX_TEST (void);				// no return value and no arguments
    299 	void UART_RX_TEST (void);				// no return value and no arguments
    300 	
    301 	void PIR_Detect(void);				// no return value and no arguments
    302 	void HALL_Detect(void);				// no return value and no arguments
    303 	void PIR_ALARM (void);				// no return value and no arguments
    304 	void MAG_ALARM (void);				// no return value and no arguments
    305 
    306 //*********************************************************************
        ********
    307 //GLOBAL VARIABLE DECLARATIONS...
    308 
    309 	//UART, I2C & ADC Variables
    310 	unsigned char	_flgUartFin;
    311 	unsigned char 	_flgI2CFin;
    312 	unsigned char	_flgADCFin;
    313 	unsigned char	_reqNotHalt; 

                                                              Page :          9
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    314 
    315 
    316 /*#####################################################################
        #########*/
    317 /*#                                  APIs                              
                #*/
    318 /*#####################################################################
        #########*/
    319 //*********************************************************************
        ********
    320 //=====================================================================
        ======
    321 //  	Start of MAIN FUNCTION
    322 //=====================================================================
        ======
    323 int main(void) 
    324 {
    325 	//LOCAL VARIABLES
    326 	char char_a;				// -128 to 127
    327 	unsigned char uchar;		// 0-255
    328 	unsigned int uint, delay;	// 0 to 65,535
    329 	long long_a;				// -2,147,483,648 to 2,147,483,647
    330 	float float_a;				// 1.17549435e-38 to 3.40282347e+38
    331 	double double_a;			// 2.2250738585072014e-308 to 1.7976931348623157e+3
        08 
    332 	int i,j,k,x,y;				// -32,768 to 32767
    333 
    334 	Init:
    335 		Initialization();		// Init Micro...(Ports, Timers, OSC, IRQ's, UART, 
        etc...)
    336 		
    337 		SerialLCD_Init_and_Clear();	// Init And/Or Clear Parallax Serial LCD 
        Display...
    338 
    339 		UART_TX_TEST();				// Test UART TX...
    340 		
    341 		NOPms(2000);
    342 		
    343 		SerialLCD_Init_and_Clear();	// Init And/Or Clear Parallax Serial LCD 
        Display...
    344 		
    345 		//UART_RX_TEST();			// Uncomment to Test UART RX...(You should use a 
        lop here to better test)
    346 
    347 	Primary_Loop:		
    348 		//PLACE USER CODE HERE...

                                                              Page :         10
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    349 		//PWM_B0_ON(4000, 125);	//period, Duty Cycle variables
    350 		PIR_Detect();
    351 		
    352 		LED5_pin ^= 1;
    353 		
    354 		main_clrWDT();
    355 
    356 	goto Primary_Loop;
    357 		
    358 
    359 }//end main
    360 
    361 //=====================================================================
        ======
    362 //  	End of MAIN FUNCTION
    363 //=====================================================================
        ======
    364 //*********************************************************************
        ********
    365 
    366 
    367 
    368 
    369 //*********************************************************************
        ********
    370 //=====================================================================
        ======
    371 //  	Start of Other Functions...
    372 //=====================================================================
        ======
    373 //*********************************************************************
        ********
    374 
    375 
    376 /**********************************************************************
        *********
    377 	Routine Name:	main_clrWDT
    378 	Form:			void main_clrWDT( void )
    379 	Parameters:		void
    380 	Return value:	void
    381 	Description:	clear WDT.
    382 ***********************************************************************
        *******/
    383 
    384 void main_clrWDT( void )
***** main\main.c(359) : Warning : W5029 : 'y': unreferenced local variable

                                                              Page :         11
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

***** main\main.c(359) : Warning : W5029 : 'x': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'k': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'j': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'i': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'double_a': unreferenced local varia
        ble
***** main\main.c(359) : Warning : W5029 : 'float_a': unreferenced local variab
        le
***** main\main.c(359) : Warning : W5029 : 'long_a': unreferenced local variabl
        e
***** main\main.c(359) : Warning : W5029 : 'delay': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'uint': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'uchar': unreferenced local variable
***** main\main.c(359) : Warning : W5029 : 'char_a': unreferenced local variabl
        e
***** main\main.c(359) : Warning : W6002 : 'Init': unreferenced label
    385 {
    386 	//__DI(); // Disable multi-interrupts
    387 		do {
    388 			WDTCON = 0x5Au;
    389 		} while (WDP != 1);
    390 		WDTCON = 0xA5u;
    391 
    392 	//__EI(); // Re-Enable multi-interrupts
    393 }
    394 
    395 //=====================================================================
        ======
    396 //	Initialize Micro to Desired State...
    397 //=====================================================================
        ======
    398 static void Initialization(void){
    399 
    400 	//Initialize Peripherals	
    401 		//BLKCON2 Control Bits...Manually Set 4/12/2013
    402 			DSIO0 = 1; // 0=> Enables Synchronous Serial Port 0 
    403 			DUA0  = 0; // 0=> Enables the operation of UART0 
    404 			DUA1  = 1; // 0=> Enables Uart1 
    405 			DI2C1 = 1; // 0=> Enables I2C bus Interface (Slave) 
    406 			DI2C0 = 0; // 0=> Enables I2C bus Interface (Master)	
    407 	
    408 		BLKCON4 = 0x00; // SA-ADC: 0=> Enables ; 0xFF=> Disables
    409 		BLKCON6 = 0x00; // Timers 8, 9, A, E, F : 0=> Enables ; 0xFF=> Disabl
        es
    410 		BLKCON7 = 0x00; // PWM (PWMC, PWMD, PWME, PWMF : 0=> Enables ; 0xFF=>
         Disables

                                                              Page :         12
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    411 
    412 	// Port Initialize...
    413 		PortA_Low();	//Initialize all 3 Ports of Q111 Port A to GPIO-Low
    414 		PortB_Low();	//Initialize all 8 Ports of Q111 Port B to GPIO-Low
    415 		PortC_Low();	//Initialize all 4 Ports of Q111 Port C to GPIO-Low
    416 
    417 			
    418 				
    419 	// ===== Set Oscillator Rate =====
    420      	SetOSC(); 	//8MHz
    421 
    422 	// ===== PWM =========================================================
        =======
    423 	//
    424 	//	NOTE: Possible conflict of B.0 with RX pin from UART0
    425 	//	
    426 	//	PinB0_PWM();		// Set up PWM peripheral (Pin on B.0)
    427 	//====================================================================
        =======	
    428 		
    429 	// ===== Comparator =====	
    430 		//analog_comparator();	//Set up anaolg comparator peripheral
    431 
    432 
    433 /* 	// ===== SET SPECIFIC DESIRED PINS AS INPUTS =====
    434 		//Setup PIR Sensor Input on B.4
    435 			//Step 1: Set Pin Direction...
    436 				PB4DIR = 1;			// PortB Bit4 set Direction to INPUT...
    437 			//Step 2: Set Pin I/O Type...
    438 				PB4C1  = 0;			// PortB Bit4 set Type to HIGH-IMPEDANCE INPUT...
    439 				PB4C0  = 0;	
    440 			//Step 3: Set Pin Purpose...
    441 				PB4MD1  = 0;		// PortB Bit4 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    442 				PB4MD0  = 0;
    443 
    444 		//Setup HALL Sensor Input on B.3
    445 			//Step 1: Set Pin Direction...
    446 				PB3DIR = 1;			// PortB Bit3 set Direction to INPUT...
    447 			//Step 2: Set Pin I/O Type...
    448 				PB3C1  = 0;			// PortB Bit3 set Type to HIGH-IMPEDANCE INPUT...
    449 				PB3C0  = 0;	
    450 			//Step 3: Set Pin Purpose...
    451 				PB3MD1  = 0;		// PortB Bit3 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    452 				PB3MD0  = 0;

                                                              Page :         13
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    453 
    454 		//Setup ACCELEROMETER X-SIGNAL Sensor Input on A.2
    455 			//Step 1: Set Pin Direction...
    456 				PA2DIR = 1;			// PortA Bit2 set Direction to INPUT...
    457 			//Step 2: Set Pin I/O Type...
    458 				PA2C1  = 0;			// PortA Bit2 set Type to HIGH-IMPEDANCE INPUT...
    459 				PA2C0  = 0;	
    460 			//Step 3: Set Pin Purpose...
    461 				PA2MD1  = 0;		// PortA Bit2 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    462 				PA2MD0  = 0;
    463 		
    464 		//Setup ACCELEROMETER Y-SIGNAL Sensor Input on A.1
    465 			//Step 1: Set Pin Direction...
    466 				PA1DIR = 1;			// PortA Bit1 set Direction to INPUT...
    467 			//Step 2: Set Pin I/O Type...
    468 				PA1C1  = 0;			// PortA Bit1 set Type to HIGH-IMPEDANCE INPUT...
    469 				PA1C0  = 0;	
    470 			//Step 3: Set Pin Purpose...
    471 				PA1MD1  = 0;		// PortA Bit1 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    472 				PA1MD0  = 0;
    473 
    474 		//Setup ACCELEROMETER Temperature-SIGNAL Sensor Input on A.0
    475 			//Step 1: Set Pin Direction...
    476 				PA0DIR = 1;			// PortA Bit0 set Direction to INPUT...
    477 			//Step 2: Set Pin I/O Type...
    478 				PA0C1  = 0;			// PortA Bit0 set Type to HIGH-IMPEDANCE INPUT...
    479 				PA0C0  = 0;	
    480 			//Step 3: Set Pin Purpose...
    481 				PA0MD1  = 0;		// PortA Bit0 set Purpose to GENERAL PURPOSE Input/Ou
        tput...
    482 				PA0MD0  = 0; */
    483 
    484 	//================== STANDBY CONTROL REGISTER=========================
        ==========
    485 	//
    486 	// SBYCON is a 2-bit special function register to control operating mo
        de of MCU
    487 	//		STP   :   HLT
    488 	// 		BIT 1 :  BIT 0
    489 	//  	 0         0     => Program RUN mode (initial value)
    490 	//  	 0         1     => HALT mode
    491 	//  	 1         0     => STOP mode
    492 	//  	 1         1     => (Prohibited)
    493 	// See ML610Q111/ML610Q112 User Manual - Section 4: MCU Control Functi

                                                              Page :         14
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        on
    494 	//	SBYCON = 0;		// Program RUN mode
    495 	//====================================================================
        ==========
    496 
    497 	//================== VOLTAGE LEVEL SUPERVISOR REGISTER ===============
        ==========
    498 	// 
    499 	// The Q11x mcu's have two channels of VOLTAGE LEVEL SUPERVISORs
    500 	// Accuracy is ±3%
    501 	//
    502 	// The threshold voltages of VLS0 (VDD fall) : 2.85V (Typ. )
    503 	//								  (VDD rise) : 2.92V (Typ. )
    504 	//
    505 	// The threshold voltages of VLS1 (VDD fall) : 4 types selectable 3.3V
        / 3.6V/ 3.9V/ 4.2V (Typ.)
    506 	// The VLS0 can be used as the low voltage level detector reset.
    507 	// 
    508 	// See ML610Q111/ML610Q112 User Manual - Section 22: Voltage Level Sup
        ervisor
    509 	//
    510 	//====================================================================
        ==========
    511 
    512    	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII
    513 	// INTERRUPT SETUP...
    514 		//	The ML610Q1xx mcu's have 31 hardware interrupt sources 
    515 		//		 7 External Interrupt Sources
    516 		//		24 Internal Interrupt Sources 
    517 		// EXAMPLE: WDT; VLS; EXTERNAL INT Pins (6); SPI; ADC; I2C (Slave); I
        2C (Master);
    518 		//			TIMERS (6); UART; Comparators (2); PWM's ((4); TBC (4)		
    519 	
    520 		irq_di();	// Disable Interrupts
    521 		//irq_init();	// Initialize Interrupts (All Off and NO Requests)
    522 			//==================================================================
        ==
    523 			//FOR NOTES ONLY...This is all taken care of in "irq_init()"
    524 				// INTERRUPT ENABLE REGISTERS...
    525 				//  IE0 = VOLTAGE LEVEL SUPERVISOR Int.
    526 				//  IE1 = EXTERNAL Ints on B3, B2, B1, B0, A2, A1, & A0
    527 				//  IE2 = SPI, A/D, I2C Slave & I2C Master Int.
    528 				//  IE3 = TIMERS 8 & 9 Ints.
    529 				//  IE4 = UART & COMPARATOR Ints.
    530 				//  IE5 = TIMERS A, B, E & F Ints.
    531 				//  IE6 = PWMC, PWMD, PWME, PWMF & 128Hz & 32Hz TBC Ints.

                                                              Page :         15
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    532 				//  IE7 = 16Hz & 2Hz TBC Ints.
    533 				//IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    534 				//--------------------------------------------------------------
    535 				// INTERRUPT REQUEST FLAG REGISTERS...
    536 				//  IRQ0 = WDT & VLS Int Requests
    537 				//  IRQ1 = EXTERNAL Int Requests
    538 				//  IRQ2 = SPI, A/D, I2C Slave & I2C Master Int Requests
    539 				//  IRQ3 = TIMERS 8 & 9 Int Requests 
    540 				//  IRQ4 = UART & COMPARATOR Int Requests 
    541 				//  IRQ5 = TIMERS A, B, E & F Int Requests 
    542 				//  IRQ6 = PWMC &  128Hz & 32Hz TBC Int Requests 
    543 				//  IRQ7 = 16Hz & 2Hz TBC Int Requests 
    544 				//IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    545 			//==================================================================
        ==
    546 
    547 			// INTERRUPT ENABLE REGISTERS...
    548 				IE0 = IE1 = IE2 = IE3 = IE4 = IE5 = IE6 = IE7 = 0;
    549 
    550 
    551 			// INTERRUPT REQUEST REGISTERS...
    552 				IRQ0 = IRQ1 = IRQ2 = IRQ3 = IRQ4 = IRQ5 = IRQ6 = IRQ7 = 0;
    553 
    554  			//------------- SET UP UART Interrupts Handler --------------------
        -----------------------
    555 				(void)irq_setHdr( (unsigned char)IRQ_NO_UA0INT, _intUart );
    556 					EUA0 = 1; 	// EUA0 is the enable flag for the UART0 interrupt (1=E
        NABLED)
***** main\main.c(555) : Warning : W5027 : Meaningless use of an expression
    557 					QUA0 = 0;	// Request Flag for the UART_0 	INTERRUPT (1=REQUEST, 0-
        NO-REQUEST)
    558 			//------------------------------------------------------------------
        ----------------------
    559 			
    560  			//------------- SET UP I2C MASTER Interrupts Handler --------------
        -----------------------
    561 				(void)irq_setHdr( (unsigned char)IRQ_NO_I2CMINT, _intI2c );
    562 					EI2CM = 1; // EI2CM is the enable flag for the I2C MASTER interrup
        t (1=ENABLED)
***** main\main.c(561) : Warning : W5027 : Meaningless use of an expression
    563 					QI2CM = 0;
    564 			//------------------------------------------------------------------
        ----------------------
    565 			
    566 			//------------- SET UP ADC Interrupts Handler ----------------------
        ----------------------

                                                              Page :         16
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    567 				(void)irq_setHdr( (unsigned char)IRQ_NO_SADINT, _intADC );
    568 					ESAD = 1; // ESAD is the enable flag for the ADC interrupt (1=ENAB
        LED)
***** main\main.c(567) : Warning : W5027 : Meaningless use of an expression
    569 					QSAD = 0; // Request Flag for the ADC INTERRUPT (1=REQUEST, 0-NO-R
        EQUEST)
    570 			//------------------------------------------------------------------
        ----------------------
    571 			
    572 			//------------- SET UP  xHz TBC Interrupt (Options: 128Hz, 32Hz, 16H
        z, 2Hz) --------------
    573 				(void)irq_setHdr( (unsigned char)IRQ_NO_T2HINT, TBC_ISR );  //Clear
         interrupt request flag
    574 					E2H = 1;	  // Enable x Hz TBC Interrupt (1=ENABLED)
***** main\main.c(573) : Warning : W5027 : Meaningless use of an expression
    575 					Q2H = 0;	  // Request flag for the TIME BASE COUNTER 2Hz Interrupt
        
    576 			// -----			
    577 			//------------- TBC...Set Ratio: : 1:1 => 1_1 ----------------------
        ----------------------
    578 				(void)tb_setHtbdiv( (unsigned char)TB_HTD_1_1 ); //Set the ratio of
         dividing frequency of the time base counter
    579 			//------------------------------------------------------------------
        ---------------------- 
    580 			
    581  			//------------- SET UP TIMER 8/9 Interrupt to increment timers ever
        y ~X ms ---------------
    582 				(void)irq_setHdr( (unsigned char)IRQ_NO_TM9INT, TMR89_ISR );  //Cle
        ar interrupt request flag
***** main\main.c(578) : Warning : W5027 : Meaningless use of an expression
    583 					ETM8 = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
***** main\main.c(582) : Warning : W5027 : Meaningless use of an expression
    584 					ETM9 = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    585 					QTM8 = 0;		// Timer 8 IRQ request flag; 1=REQUEST
    586 					QTM9 = 0;		// Timer 9 IRQ request flag; 1=REQUEST
    587 					T8CS0 = 1;		// 111 => Select PLLCLK
    588 					T8CS1 = 1;
    589 					T8CS2 = 1;
    590 					T9CS0 = 1;		// 111 => Select PLLCLK
    591 					T9CS1 = 1;
    592 					T9CS2 = 1; 
    593 					tm_init(TM_CH_NO_89);
    594 					tm_set89Data(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    595 					tm_set89Source(TM_CS_HTBCLK);
    596 					tm_start89();

                                                              Page :         17
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    597 					T89M16 = 1;		//1 => sets 16-bit timer mode
    598 				
    599 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    600 					HTD2 = 1;
    601 					HTD1 = 1;
    602 					HTD0 = 1; 
    603 			//------------------------------------------------------------------
        ----------------------
    604 
    605 			
    606  			//Commented Timer A/B Interrupt out, as it is used for NOPms() func
        tion
    607 			//------------- SET UP TIMER A/B Interrupt to increment timers every
         ~X ms ---------------
    608 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMBINT, TMRAB_ISR );  //Cle
        ar interrupt request flag
    609 					ETMA = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
***** main\main.c(608) : Warning : W5027 : Meaningless use of an expression
    610 					ETMB = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
    611 					QTMA = 0;		// timer 8 IRQ request flag; 1=REQUEST
    612 					QTMB = 0;		// timer 9 IRQ request flag; 1=REQUEST
    613 					TACS0 = 1;		// 111 => Select PLLCLK
    614 					TACS1 = 1;
    615 					TACS2 = 1;
    616 					TBCS0 = 1;		// 111 => Select PLLCLK
    617 					TBCS1 = 1;
    618 					TBCS2 = 1; 
    619 					tm_init(TM_CH_NO_AB);
    620 					tm_setABData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    621 					tm_setABSource(TM_CS_HTBCLK);
    622 					tm_startAB();
    623 					TABM16 = 1;		//1 => sets 16-bit timer mode
    624 				
    625 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    626 					HTD2 = 1;
    627 					HTD1 = 1;
    628 					HTD0 = 1; 
    629 			//------------------------------------------------------------------
        ----------------------
    630 			
    631 			
    632 			//------------- SET UP TIMER E/F Interrupt to increment timers every
         ~X ms ---------------

                                                              Page :         18
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    633 				(void)irq_setHdr( (unsigned char)IRQ_NO_TMFINT, TMREF_ISR );  //Cle
        ar interrupt request flag
    634 					ETME = 1;	  	// Enable timer E Interrupt (1=ENABLED
***** main\main.c(633) : Warning : W5027 : Meaningless use of an expression
    635 					ETMF = 1;	  	// Enable timer F Interrupt (1=ENABLED)
    636 					QTME = 0;		// Timer E IRQ request flag; 1=REQUEST
    637 					QTMF = 0;		// Timer F IRQ request flag; 1=REQUEST
    638 					TECS0 = 1;		// 111 => Select PLLCLK
    639 					TECS1 = 1;
    640 					TECS2 = 1;
    641 					TFCS0 = 1;		// 111 => Select PLLCLK
    642 					TFCS1 = 1;
    643 					TFCS2 = 1;
    644 					tm_init(TM_CH_NO_EF);
    645 					tm_setEFData(8192);				//A value of 1023 should yield 125us interr
        upts at 8.192 MHz
    646 					tm_setEFSource(TM_CS_HTBCLK);
    647 					tm_startEF();
    648 					TEFM16 = 1;		//1 => sets 16-bit timer mode
    649 				
    650 					HTD3 = 1;	//High-Speed Time Base Counter Divide Register: 1111 = 9
        182kHz
    651 					HTD2 = 1;
    652 					HTD1 = 1;
    653 					HTD0 = 1; 
    654 			//------------------------------------------------------------------
        ----------------------
    655 			
    656 			//------------- SET UP B.3 as an input, and prepare to use as an ext
        ernal interrupt ------
    657 					PB3DIR = 1;
    658 					PB3C1 = 0;
    659 					PB3C0 = 0;
    660 					PB3MD1 = 0;
    661 					PB3MD0 = 0;
    662 					PB3E1 = 1;
    663 					PB3E0 = 0;		//PBnE0-1 are used to choose the Rising-Edge Mode for 
        this interrupt
    664 					PB3SM = 0;
    665 			// -----
    666 			//------------- SET UP EXTERNAL INTERRUPT on B.3 -------------------
        ----------------------
    667 			//Options include following pins: A.0; A.1; A.2. B.0; B.1; B.2 & B.3
        
    668 			(void)irq_setHdr( (unsigned char)IRQ_NO_PB3INT, ExtInt_ISR );  //Cle
        ar interrupt request flag

                                                              Page :         19
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    669 					EPB3 = 0;	// 1=> Enables Interrupt
***** main\main.c(668) : Warning : W5027 : Meaningless use of an expression
    670 					QPB3 = 0;	// EXT IRQ request flag; 1=REQUEST	
    671 			//------------------------------------------------------------------
        ----------------------   
    672 	
    673 			
    674 	irq_ei(); // Enable Interrupts
    675 	// IIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII  
    676 
    677 	// ===== SET UP WATCH DOG TIMER ======================================
        =======
    678 		WDTMOD = 0x03; 	// 0x03=overflow 8sec...
    679 		main_clrWDT(); 	// Clear WDT   
    680 	//====================================================================
        =======
    681 	
    682 	
    683 	// ===== UART Initialization =========================================
        =======
    684 	//
    685 	//	Pin PB0 of mcu => RX  
    686 	// 	Pin PB1 of mcu => TX 
    687 	// 
    688 		(void)uart_init( (unsigned char)UART_CS_HSCLK,	// Generator       			
        	
    689 				 (unsigned short)HSCLK_KHZ,				// HSCLK frequency 				
    690 				 &_uartSetParam );						// Parameters from Structure    
    691 		uart_PortSet();									// Set UART Port Pins
***** main\main.c(690) : Warning : W5027 : Meaningless use of an expression
    692 		_flgUartFin = 0;
    693 		uart_stop();
    694 
    695 	//	
    696 	//====================================================================
        =======
    697 
    698 	// ===== I2C Initialization ==========================================
        =======
    699 	//	(void)i2c_init(I2C_MOD_FST, (unsigned short)HSCLK_KHZ, I2C_SYN_ON);
        
    700 	//	I20SYN = 1;		//Enable Clock Stretching	
    701 	//====================================================================
        =======
    702 
    703 

                                                              Page :         20
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    704 
    705 		
    706 		
    707 }//End Initialization
    708 //=====================================================================
        ======
    709 
    710 
    711 //=====================================================================
        ======
    712 //	OSC set
    713 //=====================================================================
        ======
    714 static void SetOSC(void){
    715 
    716 	//Frequency Control Register 0 (FCON0) 	
    717 	//	used to control the high-speed clock generation circuit and to sele
        ct system clock.
    718 		SYSC0  = 0;			// Used to select the frequency of the HSCLK => 00=8.19
        2MHz.
    719 		SYSC1  = 0;			//...
    720 		OSCM1  = 1;			// 10 => Built-in PLL oscillation mode
    721 		OSCM0  = 0;			//...
    722 		
    723 	// Frequency Control Register 1 (FCON1)
    724 		ENOSC  = 1;			// 1=Enable High Speed Oscillator...
    725 		SYSCLK = 1;			// Select System Clock: 1=HSCLK; 0=LSCLK 
    726 		LPLL   = 1;			// 1=Enables the use of PLL oscillation - ADDED 4/30/20
        13
    727 
    728 	__EI();					//INT enable
    729 }
    730 //=====================================================================
        ======
    731 
    732 
    733 //=====================================================================
        ======
    734 //	Analog Comparator setup
    735 //=====================================================================
        ======
    736 void analog_comparator(void){
    737 
    738 //Carl's Notes...
    739 
    740 //Step 1: Select the Interrupt Mode

                                                              Page :         21
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    741 // 	a.) Interrupt Disabled      => CMPxE1 = 0; CMPxE0 = 0;	  
    742 // 	b.) Falling-Edge Int. Mode  => CMPxE1 = 0; CMPxE0 = 1;
    743 // 	c.) Rising-Edge Int. Mode   => CMPxE1 = 1; CMPxE0 = 0;
    744 // 	d.) Both-Edge Int. Mode     => CMPxE1 = 1; CMPxE0 = 1;
    745 
    746 
    747 //Step 2: Enable the Comparator                       => CMPxEN = 1;	
    748 
    749 //Step 3: Wait 3ms to allow Comparator to stabilize
    750 
    751 //Step 4: Read the comparison result			=> CMPxD: 0= +<-; 1= +>-
    752 
    753 //Step 5: Disable the Comparator				=> CMPxEN = 0;	
    754 
    755 
    756 
    757    //Comparator 0...
    758 	CMP0EN  = 0x01; 	// Comparator ON...
    759 	CMP0E1  = 0x00; 	// No Interupt...
    760 	CMP0E0  = 0x00;
    761 	CMP0SM1 = 0x00; 	// Detect without Sampling... 
    762 	CMP0RFS = 0x01; 	// Differential Input on B5
    763 
    764    //Comparator 0 OFF
    765 	CMP0EN  = 0x00;
    766 
    767 
    768 }
    769 //=====================================================================
        ======
    770 
    771 
    772 
    773 //=====================================================================
        ======
    774 //	Clear All 3 Bits of Port A
    775 //=====================================================================
        ======
    776 void PortA_Low(void){
    777 
    778 //Carl's Notes...
    779 
    780 //Step 1: Set Pin Direction...
    781 //Step 2: Set Pin I/O Type...
    782 //Step 3: Set Pin Purpose...
    783 //Step 4: Set Pin Data...

                                                              Page :         22
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    784 
    785 	//Direction...	
    786 	PA0DIR = 0;		// PortA Bit0 set to Output Mode...
    787 	PA1DIR = 0;		// PortA Bit1 set to Output Mode...
    788 	PA2DIR = 0;		// PortA Bit2 set to Output Mode...
    789 
    790 	//I/O Type...
    791 	PA0C1  = 1;		// PortA Bit0 set to CMOS Output...
    792 	PA0C0  = 1;		
    793 	PA1C1  = 1;		// PortA Bit1 set to CMOS Output...
    794 	PA1C0  = 1;	
    795 	PA2C1  = 1;		// PortA Bit2 set to CMOS Output...
    796 	PA2C0  = 1;	
    797 
    798 	//Purpose...
    799 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose Output...
    800 	PA0MD0  = 0;	
    801 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose Output...
    802 	PA1MD0  = 0;	
    803 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose Output...
    804 	PA2MD0  = 0;	
    805 
    806 	//Data...
    807 	PA0D = 0;		// A.0 Output OFF....
    808 	PA1D = 0;		// A.1 Output OFF....
    809 	PA2D = 0;		// A.2 Output OFF....
    810 
    811 	main_clrWDT(); 	// Clear WDT
    812 
    813 }
    814 //=====================================================================
        ======
    815 
    816 //=====================================================================
        ======
    817 //	Clear All 8 Bits of Port B
    818 //=====================================================================
        ======
    819 void PortB_Low(void){
    820 
    821 //Carl's Notes...
    822 
    823 //Step 1: Set Pin Direction...
    824 //Step 2: Set Pin I/O Type...
    825 //Step 3: Set Pin Purpose...
    826 //Step 4: Set Pin Data...

                                                              Page :         23
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    827 
    828 	//Direction...	
    829 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
    830 	PB1DIR = 0;		// PortB Bit1 set to Output Mode...
    831 	PB2DIR = 0;		// PortB Bit2 set to Output Mode...
    832 	PB3DIR = 0;		// PortB Bit3 set to Output Mode...
    833 	PB4DIR = 0;		// PortB Bit4 set to Output Mode...
    834 	PB5DIR = 0;		// PortB Bit5 set to Output Mode...
    835 	PB6DIR = 0;		// PortB Bit6 set to Output Mode...
    836 	PB7DIR = 0;		// PortB Bit7 set to Output Mode...
    837 
    838 	//I/O Type...
    839 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
    840 	PB0C0  = 1;		
    841 	PB1C1  = 1;		// PortB Bit1 set to CMOS Output...
    842 	PB1C0  = 1;	
    843 	PB2C1  = 1;		// PortB Bit2 set to CMOS Output...
    844 	PB2C0  = 1;	
    845 	PB3C1  = 1;		// PortB Bit3 set to CMOS Output...
    846 	PB3C0  = 1;		
    847 	PB4C1  = 1;		// PortB Bit4 set to CMOS Output...
    848 	PB4C0  = 1;	
    849 	PB5C1  = 1;		// PortB Bit5 set to CMOS Output...
    850 	PB5C0  = 1;	
    851 	PB6C1  = 1;		// PortB Bit6 set to CMOS Output...
    852 	PB6C0  = 1;	
    853 	PB7C1  = 1;		// PortB Bit7 set to CMOS Output...
    854 	PB7C0  = 1;	
    855 
    856 	//Purpose...
    857 	PB0MD1  = 0;	// PortB Bit0 set to General Purpose Output...
    858 	PB0MD0  = 0;	
    859 	PB1MD1  = 0;	// PortB Bit1 set to General Purpose Output...
    860 	PB1MD0  = 0;	
    861 	PB2MD1  = 0;	// PortB Bit2 set to General Purpose Output...
    862 	PB2MD0  = 0;	
    863 	PB3MD1  = 0;	// PortB Bit3 set to General Purpose Output...
    864 	PB3MD0  = 0;	
    865 	PB4MD1  = 0;	// PortB Bit4 set to General Purpose Output...
    866 	PB4MD0  = 0;	
    867 	PB5MD1  = 0;	// PortB Bit5 set to General Purpose Output...
    868 	PB5MD0  = 0;
    869 	PB6MD1  = 0;	// PortB Bit6 set to General Purpose Output...
    870 	PB6MD0  = 0;	
    871 	PB7MD1  = 0;	// PortB Bit7 set to General Purpose Output...
    872 	PB7MD0  = 0;

                                                              Page :         24
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    873 
    874 	//Data...
    875 	PB0D = 0;		// B.0 Output OFF....
    876 	PB1D = 0;		// B.1 Output OFF....
    877 	PB2D = 0;		// B.2 Output OFF....
    878 	PB3D = 0;		// B.3 Output OFF....
    879 	PB4D = 0;		// B.4 Output OFF....
    880 	PB5D = 0;		// B.5 Output OFF....
    881 	PB6D = 0;		// B.6 Output OFF....
    882 	PB7D = 0;		// B.7 Output OFF....
    883 
    884 	main_clrWDT(); 	// Clear WDT
    885 
    886 }
    887 //=====================================================================
        ======
    888 
    889 //=====================================================================
        ======
    890 //	Clear All 4 Bits of Port C
    891 //=====================================================================
        ======
    892 void PortC_Low(void){
    893 
    894 //Carl's Notes...
    895 
    896 //Step 1: Set Pin Direction...
    897 //Step 2: Set Pin I/O Type...
    898 //Step 3: Set Pin Purpose...
    899 //Step 4: Set Pin Data...
    900 
    901 	//Direction...	
    902 	PC0DIR = 0;		// PortC Bit0 set to Output Mode...
    903 	PC1DIR = 0;		// PortC Bit1 set to Output Mode...
    904 	PC2DIR = 0;		// PortC Bit2 set to Output Mode...
    905 	PC3DIR = 0;		// PortC Bit3 set to Output Mode...
    906 
    907 
    908 	//I/O Type...
    909 	PC0C1  = 1;		// PortC Bit0 set to CMOS Output...
    910 	PC0C0  = 1;		
    911 	PC1C1  = 1;		// PortC Bit1 set to CMOS Output...
    912 	PC1C0  = 1;	
    913 	PC2C1  = 1;		// PortC Bit2 set to CMOS Output...
    914 	PC2C0  = 1;	
    915 	PC3C1  = 1;		// PortC Bit3 set to CMOS Output...

                                                              Page :         25
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    916 	PC3C0  = 1;		
    917 
    918 	//Purpose...
    919 	PC0MD1  = 0;	// PortC Bit0 set to General Purpose Output...
    920 	PC0MD0  = 0;	
    921 	PC1MD1  = 0;	// PortC Bit1 set to General Purpose Output...
    922 	PC1MD0  = 0;	
    923 	PC2MD1  = 0;	// PortC Bit2 set to General Purpose Output...
    924 	PC2MD0  = 0;	
    925 	PC3MD1  = 0;	// PortC Bit3 set to General Purpose Output...
    926 	PC3MD0  = 0;	
    927 
    928 	//Data...
    929 	PC0D = 0;		// C.0 Output OFF....
    930 	PC1D = 0;		// C.1 Output OFF....
    931 	PC2D = 0;		// C.2 Output OFF....
    932 	PC3D = 0;		// C.3 Output OFF....
    933 
    934 	main_clrWDT(); 	// Clear WDT
    935 
    936 }
    937 //=====================================================================
        ======
    938 
    939 //=====================================================================
        ======
    940 //	Set All 3 Bits of Port A as Digital Input Pins
    941 //=====================================================================
        ======
    942 void PortA_Digital_Inputs(void){
    943 
    944 //Carl's Notes...
    945 
    946 //Step 1: Set Pin Direction...
    947 //Step 2: Set Pin I/O Type...
    948 //Step 3: Set Pin Purpose...
    949 //Step 4: Set Pin Data...
    950 
    951 	//Direction...	
    952 	PA0DIR = 1;		// PortA Bit0 set to Input Mode...
    953 	PA1DIR = 1;		// PortA Bit1 set to Input Mode...
    954 	PA2DIR = 1;		// PortA Bit2 set to Input Mode...
    955 
    956 
    957 	//I/O Type...
    958 	PA0C1  = 1;		// PortA Bit0 set to Input with Pull-Up Resistor...

                                                              Page :         26
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

    959 	PA0C0  = 0;		
    960 	PA1C1  = 1;		// PortA Bit1 set to Input with Pull-Up Resistor...
    961 	PA1C0  = 0;	
    962 	PA2C1  = 1;		// PortA Bit2 set to Input with Pull-Up Resistor...
    963 	PA2C0  = 0;	
    964 
    965 	//Purpose...
    966 	PA0MD1  = 0;	// PortA Bit0 set to General Purpose I/O...
    967 	PA0MD0  = 0;	
    968 	PA1MD1  = 0;	// PortA Bit1 set to General Purpose I/O...
    969 	PA1MD0  = 0;	
    970 	PA2MD1  = 0;	// PortA Bit2 set to General Purpose I/O...
    971 	PA2MD0  = 0;	
    972 
    973 	main_clrWDT(); 	// Clear WDT
    974 
    975 }
    976 //=====================================================================
        ======
    977 
    978 //=====================================================================
        ======
    979 //	PWM Output on Port B - Pin 0
    980 //=====================================================================
        ======
    981 void PWM_B0_ON(int myPeriod, int myDutyCycle){
    982 
    983 		
    984 		//SET THE PERIOD...
    985 			PWCP = myPeriod;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 2
        00=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
    986 
    987 		//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz
    988 		//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
    989 		//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
    990 		//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
    991 		//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
    992 		//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	
    993 			PWCD =    myDutyCycle;		//12    ~  0.25% duty cycle @ 160Hz
    994 		
    995 		PCRUN = 1;		// TURN PWM ON
    996 
    997 }//END PWM_B0_ON Function
    998 //=====================================================================
        ======
    999 

                                                              Page :         27
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1000 
   1001 
   1002 //=====================================================================
        ======
   1003 //	PWM Output on Port B - Pin 0
   1004 //=====================================================================
        ======
   1005 void PinB0_PWM(void){
   1006 
   1007 //Carl's Notes...
   1008 
   1009 //Step 1: Set Pin Direction...
   1010 //Step 2: Set Pin I/O Type...
   1011 //Step 3: Set Pin Purpose...
   1012 //Step 4: Select the Clock Mode...
   1013 //Step 5: Set the Duty Cycle...
   1014 //Step 5: Start the PWM Counter...
   1015 
   1016 	//Direction...	
   1017 	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
   1018 
   1019 	//I/O Type...
   1020 	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
   1021 	PB0C0  = 1;		
   1022 
   1023 	//Purpose...
   1024 	PB0MD1  = 0;	// PortB Bit0 set to PWM Output (0,1)...
   1025 	PB0MD0  = 1;	
   1026 
   1027 
   1028 	//Select the Clock Mode...
   1029 	PCCS1 = 0;	//00= LS; 01=HS; 10=PLL
   1030 	PCCS0 = 1;
   1031 
   1032 	//SET THE PERIOD...(Added April 4th, 2013)
   1033 	PWCP = 4250;		// Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5
        kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
   1034 
   1035 	//SET THE DUTY CYCLE...(Added April 15th, 2013)
   1036 
   1037 	//PWCD =    10;		//10    ~  0.2 % duty cycle @ 120Hz
   1038 	//PWCD =   100;		//100   ~  2.4 % duty cycle @ 120Hz
   1039 	//PWCD =  1000;		//1000  ~ 23.5 % duty cycle @ 120Hz
   1040 	//PWCD = 4000;		//4000  ~ 94.0 % duty cycle @ 120Hz
   1041 	//PWCD = 4150;		//4150  ~ 99.0 % duty cycle @ 120Hz
   1042 	//PWCD =    20;		//20    ~  0.4 % duty cycle @ 120Hz	

                                                              Page :         28
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1043 	PWCD =    12;		//12    ~  0.25% duty cycle @ 160Hz
   1044 
   1045 	PCRUN = 0;		// OFF to start
   1046 
   1047 }
   1048 //=====================================================================
        ======
   1049 
   1050 
   1051 
   1052 
   1053 
   1054 
   1055 
   1056 
   1057 /**********************************************************************
        *********
   1058 	Routine Name:	NOPms
   1059 	Form:			void NOPms( unsigned int ms )
   1060 	Parameters:		unsigned int sec = "Number of seconds where the device is
         
   1061 						not doing anything"
   1062 	Return value:	void
   1063 	Description:	NOP for x seconds. Uses HTB* clock (512kHz) and 
   1064 					timer A+B (max 0xFFFF)*(HTBCLK = 1/16 * HSCLK 
   1065 					= (1/16)*8192kHz = 512kHz, see HTBDR to change if 
   1066 					we need an even smaller increment timer...)
   1067 					1/(512kHz) * 0xFFFF = 127ms					
   1068 ***********************************************************************
        *******/
   1069 
   1070 void NOPms( unsigned int ms ){ 
   1071 	unsigned int timerThres;
   1072 	unsigned char TimeFlag;
   1073 	unsigned int TempSec;
   1074 	unsigned int timer;
   1075 	unsigned int timertest;
   1076 
   1077 		TempSec = ms;
   1078 		TimeFlag = 0;
   1079 
   1080 		tm_init(TM_CH_NO_AB);
   1081 		tm_setABSource(TM_CS_HTBCLK);
   1082 		tm_setABData(0xffff);
   1083 
   1084 		if(ms < 128){

                                                              Page :         29
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1085 			timerThres = 0x1FF * ms;
   1086 			TimeFlag = 0;
   1087 		}
   1088 		if(ms == 128){
   1089 			timerThres = 0xFFFF;
   1090 			TimeFlag = 0;
   1091 		}
   1092 		if(ms > 128){
   1093 			while(TempSec > 128){
   1094 				TempSec -= 128;
   1095 				TimeFlag++;
   1096 			}
   1097 			if(TempSec != 0){
   1098 				timerThres = 0x1FF * TempSec;
   1099 			}
   1100 			else{
   1101 				timerThres = 0xFFFF;
   1102 				TimeFlag--;
   1103 			}
   1104 		}
   1105 
   1106 	TimerRestart:
   1107 		main_clrWDT();	
   1108 		tm_startAB();	//using LSCLK, the maximum delay time we have is ~2 sec
        s
   1109 		timer = tm_getABCounter();
   1110 		while(timer < timerThres){
   1111 			timer = tm_getABCounter();
   1112 			timertest = timer;
   1113 		}
   1114 		if(TimeFlag !=0){
   1115 			tm_stopAB();
   1116 			TimeFlag--;
   1117 			timerThres = 0xFFFF;
   1118 			goto TimerRestart;
   1119 		}
   1120 } //End NOPms 
   1121 
   1122 
   1123 /**********************************************************************
        *********
   1124 	Routine Name:	_funcUartFin
   1125 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1126 	Parameters:		unsigned int size		 : 
   1127 					unsigned char errStat	 : 

                                                              Page :         30
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1128 	Return value:	void
   1129 	Description:	UART transmission completion callback function.
   1130 ***********************************************************************
        *******/
   1131 static void _funcUartFin( unsigned int size, unsigned char errStat )
   1132 {
   1133 	uart_continue();						// Function in UART.c: process to continue send 
        & receive...
   1134 	_flgUartFin = (unsigned char)FLG_SET;
   1135 	main_reqNotHalt();						// uncommented 5/2/2013
   1136 }
   1137 
   1138 /**********************************************************************
        *********
   1139 	Routine Name:	_funcI2CFin
   1140 	Form:			static void _funcUartFin( unsigned int size, unsigned char err
        Stat )
   1141 	Parameters:		unsigned int size		 : 
   1142 					unsigned char errStat	 : 
   1143 	Return value:	void
   1144 	Description:	UART transmission completion callback function.
   1145 ***********************************************************************
        *******/
   1146 static void _funcI2CFin( unsigned int size, unsigned char errStat )
***** main\main.c(1136) : Warning : W5025 : 'errStat': unreferenced formal para
        meter
***** main\main.c(1136) : Warning : W5025 : 'size': unreferenced formal paramet
        er
   1147 {
   1148 	i2c_continue();							// Function in UART.c: process to continue send 
        & receive...
   1149 	_flgI2CFin = (unsigned char)FLG_SET;
   1150 	main_reqNotHalt();						// uncommented 5/2/2013
   1151 }
   1152 
   1153 /**********************************************************************
        *********
   1154 	Routine Name:	_intI2c
   1155 	Form:			static void _intI2c( void )
   1156 	Parameters:		void
   1157 	Return value:	void
   1158 	Description:	I2C handler.
   1159 ***********************************************************************
        *******/
   1160 static void _intI2c( void )
***** main\main.c(1151) : Warning : W5025 : 'errStat': unreferenced formal para

                                                              Page :         31
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

        meter
***** main\main.c(1151) : Warning : W5025 : 'size': unreferenced formal paramet
        er
   1161 {
   1162 	(void)i2c_continue();
   1163 	main_reqNotHalt();
***** main\main.c(1162) : Warning : W5027 : Meaningless use of an expression
   1164 }
   1165 
   1166 /**********************************************************************
        *********
   1167 	Routine Name:	_intADC
   1168 	Form:			static void _intADC( void )
   1169 	Parameters:		void
   1170 	Return value:	void
   1171 	Description:	I2C handler.
   1172 ***********************************************************************
        *******/
   1173 static void _intADC( void )
   1174 {
   1175 	_flgADCFin = 1;
   1176 }
   1177 
   1178 /**********************************************************************
        *********
   1179 	Routine Name:	main_reqNotHalt
   1180 	Form:			void reqNotHalt( void )
   1181 	Parameters:		void
   1182 	Return value:	void
   1183 	Description:	request not halt.
   1184 ***********************************************************************
        *******/
   1185 void main_reqNotHalt( void )
   1186 {
   1187 	_reqNotHalt = (unsigned char)FLG_SET;
   1188 }
   1189 
   1190 /**********************************************************************
        *********
   1191 	Routine Name:	_intUart
   1192 	Form:			static void _intUart( void )
   1193 	Parameters:		void
   1194 	Return value:	void
   1195 	Description:	UART handler.
   1196 ***********************************************************************
        *******/

                                                              Page :         32
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1197 static void _intUart( void )
   1198 {
   1199 	uart_continue(); 	//in UART.c: process to continue send and receive...
        
   1200 }
   1201 
   1202 
   1203 //=====================================================================
        ======
   1204 //INTERRUPT SERVICE ROUTINE FOR TBC
   1205 static void TBC_ISR( void ) 
   1206 {
   1207 	//Your Code Here...
   1208 	LED2_pin ^= 1;	// Toggle LED
   1209 	tb_setHtbdiv( (unsigned char)TB_HTD_1_1 ); //Set the ratio of dividing
         frequency of the time base counter
   1210 }
   1211 //=====================================================================
        ======
   1212 
   1213 //=====================================================================
        ======
   1214 //INTERRUPT SERVICE ROUTINE FOR Timer8/9
   1215 static void TMR89_ISR( void ) 
   1216 {
   1217 	//Your Code Here...
   1218 	LED1_pin ^= 1;
   1219 	tm_init(TM_CH_NO_89);
   1220 	tm_start89();		//Clear & Restart Timer...
   1221 }
   1222 //=====================================================================
        ======
   1223 
   1224 //=====================================================================
        ======
   1225 //INTERRUPT SERVICE ROUTINE FOR TimerA/B
   1226 static void TMRAB_ISR( void ) 
   1227 {
   1228 	//Your Code Here...
   1229 	LED4_pin ^= 1;
   1230 	tm_init(TM_CH_NO_AB);
   1231 	tm_startAB();		//Clear & Restart Timer...
   1232 }
   1233 //=====================================================================
        ======
   1234 

                                                              Page :         33
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1235 //=====================================================================
        ======
   1236 //INTERRUPT SERVICE ROUTINE FOR TimerE/F
   1237 static void TMREF_ISR( void ) 
   1238 {
   1239 	//Your Code Here...
   1240 	LED7_pin ^= 1;
   1241 	tm_init(TM_CH_NO_EF);
   1242 	tm_startEF();		//Clear & Restart Timer...
   1243 }
   1244 //=====================================================================
        ======
   1245 
   1246 
   1247 //=====================================================================
        ======
   1248 // ----- ISR for External Interrupt Pin 
   1249 static void ExtInt_ISR( void ) 
   1250 {
   1251 	//Your Code Here...
   1252 	LED9_pin ^= 1;
   1253 	
   1254 }
   1255 //=====================================================================
        ======
   1256 
   1257 //=====================================================================
        ======
   1258 void NOPx( unsigned int MyCount )
   1259 {
   1260 unsigned int ONCNT = 0;
   1261 unsigned int xxx;
   1262 
   1263 xxx = MyCount;
   1264 
   1265 	while(ONCNT < xxx) {	// NOP for "xxx" Cycles
   1266 		ONCNT++;
   1267 	}
   1268 	ONCNT = 0;			// Reset Counter 
   1269 }
   1270 //=====================================================================
        ======
   1271 
   1272 
   1273 
   1274 

                                                              Page :         34
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1275 
   1276 
   1277 
   1278 
   1279 
   1280 
   1281 
   1282 //=====================================================================
        ======
   1283 void SerialLCD_Init_and_Clear(void){
   1284 
   1285 		unsigned char LCD_CONFIG[3]   = {LCD_Display_ON, LCD_Backlight_ON, LC
        D_HOME}; 
   1286 		unsigned char LCD_CONFIG2[1]  = {LCD_FormFeedClear};	//Move to 0,0 & 
        Clear Display 		
   1287 
   1288  		//-------------------------------------------------------------
   1289 		//Now, CLEAR THE DISPLAY!
   1290 		uart_startSend(LCD_CONFIG2, 1, _funcUartFin); // Send LCD COMMANDS
   1291 		while(_flgUartFin != 1){
   1292 			main_clrWDT(); 
   1293 		}
   1294 		
   1295 		NOPms(100); 
   1296 }
   1297 //=====================================================================
        ======
   1298 
   1299 //=====================================================================
        ======
   1300 //Simple function to demonstrate Serial LCD
   1301 void UART_TX_TEST (void)
   1302 {
   1303 		unsigned char LCD_Cmd_HOME  = {LCD_HOME}; 
   1304 
   1305 	// ===== START UART TX TEST... =====
   1306 		unsigned char UARTStartupMessage[26] = {"ML610Q111 UART - TX Demo: "}
        ;
   1307 		
   1308 		_flgUartFin = 0;
   1309 		uart_stop();
   1310 		uart_startSend(UARTStartupMessage, 26, _funcUartFin);
   1311 		while(_flgUartFin != 1){
   1312 			main_clrWDT(); 
   1313 		}
   1314 			

                                                              Page :         35
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1315 	/* // ===== END UART TX TEST =====  
   1316 	
   1317 			
   1318   		//Re-CONFIGURE THE LCD...
   1319 		uart_startSend(LCD_HOME, 1, _funcUartFin); // Return Cursor back to H
        OME
   1320 		while(_flgUartFin != 1){
   1321 			main_clrWDT(); 
   1322 		} */
   1323 }
   1324 //=====================================================================
        ======
   1325 
   1326 //=====================================================================
        ======
   1327 void UART_RX_TEST(void){
   1328 
   1329 	unsigned char	MyRx[1];	//Small Array...for UART Receive, etc
   1330 	int i;
   1331  	
   1332 	// CLEAR the Array...
   1333 		for(i = 0; i<1; i++) 
   1334 		{
   1335 			MyRx[i] = 0x20;	// 0x20 = "Space" => Clear Array
   1336 		} 
   1337 	 
   1338 	
   1339 	// ===== START UART RX TEST... =====
   1340 		_flgUartFin = 0;
   1341 		uart_stop();
   1342 		uart_startReceive(MyRx, 1, _funcUartFin);	// RX!
   1343 		while(_flgUartFin != 1){
   1344 			main_clrWDT();	
   1345 			LED5_pin ^= 1;	//waiting for data...
   1346 		}
   1347 		
   1348  		//If data in RX Buffer...echo it out the TX port
   1349 		if(MyRx[0] != 0x20){			
   1350 			//Echo the Received Data
   1351 			_flgUartFin = 0;
   1352 			uart_stop();
   1353 			uart_startSend(MyRx, 1, _funcUartFin);	// TX!
   1354 			while(_flgUartFin != 1){
   1355 				main_clrWDT(); 
   1356 			}
   1357 		} 

                                                              Page :         36
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1358 	// ===== END UART RX TEST =====
   1359 		
   1360 }
   1361 //=====================================================================
        ======
   1362 
   1363 //=====================================================================
        ======
   1364 void PIR_Detect(void)
   1365 {
   1366 unsigned int x;	// 0 to 65,535
   1367 // Passive InfraRed Sensor Detection...
   1368 // Q111 MICRO CONNECTIONS FOR (LaPi Plug 'n Play Board)
   1369 
   1370 	//PIR_pin => PB4D	
   1371 	//Setup PIR Sensor Input on B.4
   1372 		//Step 1: Set Pin Direction...
   1373 			PB4DIR = 1;			// PortB Bit4 set Direction to INPUT...
   1374 		//Step 2: Set Pin I/O Type...
   1375 			PB4C1  = 0;			// PortB Bit4 set Type to HIGH-IMPEDANCE INPUT...
   1376 			PB4C0  = 0;	
   1377 		//Step 3: Set Pin Purpose...
   1378 			PB4MD1  = 0;		// PortB Bit4 set Purpose to GENERAL PURPOSE Input/Out
        put...
   1379 			PB4MD0  = 0;
   1380 
   1381 	if (PIR_pin == 1)
   1382 	{
   1383 		PIR_ALARM();	// PIR DETECTION EVENT!
   1384 	}//endif
   1385 	else if (PIR_pin == 0)
   1386 	{
   1387 	
   1388 		//Add code here for PIR event NOT DETECTED!
   1389 		
   1390 	}
   1391 
   1392 }
   1393 //=====================================================================
        ======
   1394 
   1395 //=====================================================================
        ======
   1396 void HALL_Detect(void)
***** main\main.c(1392) : Warning : W5029 : 'x': unreferenced local variable
   1397 {

                                                              Page :         37
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1398 unsigned int x;	// 0 to 65,535
   1399 // HALL Sensor Detection...
   1400 // Q111 MICRO CONNECTIONS FOR (LaPi Plug 'n Play Board)
   1401 
   1402 	//Hall_sig_pin =>	PB3D	
   1403 	//Setup HALL Sensor Input on B.3
   1404 		//Step 1: Set Pin Direction...
   1405 			PB3DIR = 1;			// PortB Bit3 set Direction to INPUT...
   1406 		//Step 2: Set Pin I/O Type...
   1407 			PB3C1  = 0;			// PortB Bit3 set Type to HIGH-IMPEDANCE INPUT...
   1408 			PB3C0  = 0;	
   1409 		//Step 3: Set Pin Purpose...
   1410 			PB3MD1  = 0;		// PortB Bit3 set Purpose to GENERAL PURPOSE Input/Out
        put...
   1411 			PB3MD0  = 0;
   1412 
   1413 	if (Hall_sig_pin == 0) 		//Low means B-field present...
   1414 	{
   1415 	
   1416 		//Add code here for MAG FIELD DETECTION EVENT!
   1417 			
   1418 	}//endif
   1419 	else if (Hall_sig_pin == 1)	//High means no B-field present...
   1420 	{
   1421 	
   1422 		//Add code here for MAG FIELD NOT DETECTED!
   1423 		
   1424 	}
   1425 
   1426 }
   1427 //=====================================================================
        ======
   1428  	
   1429 //=====================================================================
        ======
   1430 void PIR_ALARM (void) {
***** main\main.c(1426) : Warning : W5029 : 'x': unreferenced local variable
   1431 
   1432 	//unsigned char LCD_Cmd_HOME  = {LCD_HOME}; 
   1433 	//unsigned char LCD_Cmd_FF  = {LCD_FormFeedClear};	//The cursor is mov
        ed to position 0 on line 0 and the entire display is cleared 
   1434 
   1435 	unsigned char PIR_ALARM_Message[16] = {"PIR EVENT ALARM!"};
   1436 	unsigned char counter;
   1437 		
   1438 	// ===== START ALARM EVENT UART TX... =====

                                                              Page :         38
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

   1439 		//CLEAR Parallax LCD Display!
   1440 		SerialLCD_Init_and_Clear();	// Init And/Or Clear Parallax Serial LCD 
        Display...
   1441 		//Now Send ALARM Message...
   1442 		_flgUartFin = 0;
   1443 		uart_stop();
   1444 		uart_startSend(PIR_ALARM_Message, 16, _funcUartFin);
   1445 		while(_flgUartFin != 1){
   1446 			main_clrWDT(); 
   1447 		}
   1448 		
   1449 		///FLASH LED while Event Detected...
   1450 		while(PIR_pin == 1) //While motion is still detected...
   1451 		{
   1452 			LED8_pin = 1;	// Toggle LED
   1453 				NOPms(100);
   1454 			LED8_pin = 0;	// Toggle LED
   1455 				NOPms(100);
   1456 		} ///wend
   1457 		
   1458 		//Finally, Clear Display & Reset
   1459 		SerialLCD_Init_and_Clear();	// Init And/Or Clear Parallax Serial LCD 
        Display...
   1460 	// ===== END ALARM EVENT UART TX =====  
   1461 	
   1462 
   1463 }
   1464 //=====================================================================
        ======
   1465 
   1466 ***** main\main.c(1463) : Warning : W5029 : 'counter': unreferenced local varia
        ble
***** main\main.c(1466) : Warning : W5030 : 'tm_get89Counter': unreferenced sta
        tic function
***** main\main.c(1466) : Warning : W5030 : 'tm_getEFSource': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_getABSource': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_get89Source': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_restartAB': unreferenced static
         function
***** main\main.c(1466) : Warning : W5030 : 'tm_clrABCounter': unreferenced sta
        tic function
***** main\main.c(1466) : Warning : W5030 : 'tm_restartEF': unreferenced static

                                                              Page :         39
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c


 Line #  Source Line

         function
***** main\main.c(1466) : Warning : W5030 : 'tm_clrEFCounter': unreferenced sta
        tic function
***** main\main.c(1466) : Warning : W5030 : 'tm_getEFCounter': unreferenced sta
        tic function
***** main\main.c(1466) : Warning : W5030 : 'tm_stop89': unreferenced static fu
        nction
***** main\main.c(1466) : Warning : W5030 : 'tm_stopEF': unreferenced static fu
        nction
***** main\main.c(1466) : Warning : W5030 : 'tm_setAOneshot': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_setBOneshot': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_set9Oneshot': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : 'tm_set8Oneshot': unreferenced stat
        ic function
***** main\main.c(1466) : Warning : W5030 : '_funcI2CFin': unreferenced static 
        function
***** main\main.c(1466) : Warning : W5030 : 'tm_clr89Counter': unreferenced sta
        tic function
***** main\main.c(1466) : Warning : W5030 : 'tm_restart89': unreferenced static
         function



Error(s)     :  0
Warning(s)   :  49



                                                              Page :         40
                                                              Date : 07-29-2014
                                                              Time :   19:31:27
CCU8 C Compiler Ver.3.41, Source List
Source File : main\main.c



                            STACK INFORMATION
                            -----------------

  FUNCTION                         LOCALS    CONTEXT    OTHERS    TOTAL
  --------                         ------    -------    ------    -----
  _main                            0         0          0         0         
  _main_clrWDT                     0         0          0         0         
  _Initialization                  0         2          2         4         
  _SetOSC                          0         0          0         0         
  _analog_comparator               0         0          0         0         
  _PortA_Low                       0         0          0         0         
  _PortB_Low                       0         0          0         0         
  _PortC_Low                       0         0          0         0         
  _PortA_Digital_Inputs            0         0          0         0         
  _PWM_B0_ON                       0         0          0         0         
  _PinB0_PWM                       0         0          0         0         
  _NOPms                           8         6          0         14        
  __funcUartFin                    0         2          0         2         
  __funcI2CFin                     0         2          0         2         
  __intI2c                         0         2          0         2         
  __intADC                         0         0          0         0         
  _main_reqNotHalt                 0         0          0         0         
  __intUart                        0         0          0         0         
  _TBC_ISR                         0         0          0         0         
  _TMR89_ISR                       0         2          0         2         
  _TMRAB_ISR                       0         2          0         2         
  _TMREF_ISR                       0         2          0         2         
  _ExtInt_ISR                      0         0          0         0         
  _NOPx                            4         4          0         8         
  _SerialLCD_Init_and_Clear        6         4          2         12        
  _UART_TX_TEST                    26        4          2         32        
  _UART_RX_TEST                    2         4          2         8         
  _PIR_Detect                      0         2          0         2         
  _HALL_Detect                     0         0          0         0         
  _PIR_ALARM                       16        4          2         22        
